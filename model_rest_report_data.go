/*
SendX REST API

# SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 

API version: 1.0.0
Contact: hello@sendx.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendx

import (
	"encoding/json"
)

// checks if the RestReportData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestReportData{}

// RestReportData struct for RestReportData
type RestReportData struct {
	// Unique identifier of the campaign
	CampaignId *string `json:"campaignId,omitempty"`
	LinkStats []LinkStat `json:"linkStats,omitempty"`
	// Total number of unique contacts who clicked on the link
	ClickedUniqueContactCount *int32 `json:"clickedUniqueContactCount,omitempty"`
	// Total number of unique contacts who opened the link
	OpenedUniqueContactCount *int32 `json:"openedUniqueContactCount,omitempty"`
	// Total number of contacts who sent the link
	SentContactCount *int32 `json:"sentContactCount,omitempty"`
	// Total number of contacts who unsubscribed from the link
	UnsubscribeContactCount *int32 `json:"unsubscribeContactCount,omitempty"`
	// Total number of contacts who bounced the link
	BounceContactCount *int32 `json:"bounceContactCount,omitempty"`
	// Total number of contacts who marked the link as spam
	SpamContactCount *int32 `json:"spamContactCount,omitempty"`
	// Total number of contacts who clicked on the link
	ClickedContactCount *int32 `json:"clickedContactCount,omitempty"`
	// Total number of contacts who opened the link
	OpenedContactCount *int32 `json:"openedContactCount,omitempty"`
}

// NewRestReportData instantiates a new RestReportData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestReportData() *RestReportData {
	this := RestReportData{}
	return &this
}

// NewRestReportDataWithDefaults instantiates a new RestReportData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestReportDataWithDefaults() *RestReportData {
	this := RestReportData{}
	return &this
}

// GetCampaignId returns the CampaignId field value if set, zero value otherwise.
func (o *RestReportData) GetCampaignId() string {
	if o == nil || IsNil(o.CampaignId) {
		var ret string
		return ret
	}
	return *o.CampaignId
}

// GetCampaignIdOk returns a tuple with the CampaignId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestReportData) GetCampaignIdOk() (*string, bool) {
	if o == nil || IsNil(o.CampaignId) {
		return nil, false
	}
	return o.CampaignId, true
}

// HasCampaignId returns a boolean if a field has been set.
func (o *RestReportData) HasCampaignId() bool {
	if o != nil && !IsNil(o.CampaignId) {
		return true
	}

	return false
}

// SetCampaignId gets a reference to the given string and assigns it to the CampaignId field.
func (o *RestReportData) SetCampaignId(v string) {
	o.CampaignId = &v
}

// GetLinkStats returns the LinkStats field value if set, zero value otherwise.
func (o *RestReportData) GetLinkStats() []LinkStat {
	if o == nil || IsNil(o.LinkStats) {
		var ret []LinkStat
		return ret
	}
	return o.LinkStats
}

// GetLinkStatsOk returns a tuple with the LinkStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestReportData) GetLinkStatsOk() ([]LinkStat, bool) {
	if o == nil || IsNil(o.LinkStats) {
		return nil, false
	}
	return o.LinkStats, true
}

// HasLinkStats returns a boolean if a field has been set.
func (o *RestReportData) HasLinkStats() bool {
	if o != nil && !IsNil(o.LinkStats) {
		return true
	}

	return false
}

// SetLinkStats gets a reference to the given []LinkStat and assigns it to the LinkStats field.
func (o *RestReportData) SetLinkStats(v []LinkStat) {
	o.LinkStats = v
}

// GetClickedUniqueContactCount returns the ClickedUniqueContactCount field value if set, zero value otherwise.
func (o *RestReportData) GetClickedUniqueContactCount() int32 {
	if o == nil || IsNil(o.ClickedUniqueContactCount) {
		var ret int32
		return ret
	}
	return *o.ClickedUniqueContactCount
}

// GetClickedUniqueContactCountOk returns a tuple with the ClickedUniqueContactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestReportData) GetClickedUniqueContactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ClickedUniqueContactCount) {
		return nil, false
	}
	return o.ClickedUniqueContactCount, true
}

// HasClickedUniqueContactCount returns a boolean if a field has been set.
func (o *RestReportData) HasClickedUniqueContactCount() bool {
	if o != nil && !IsNil(o.ClickedUniqueContactCount) {
		return true
	}

	return false
}

// SetClickedUniqueContactCount gets a reference to the given int32 and assigns it to the ClickedUniqueContactCount field.
func (o *RestReportData) SetClickedUniqueContactCount(v int32) {
	o.ClickedUniqueContactCount = &v
}

// GetOpenedUniqueContactCount returns the OpenedUniqueContactCount field value if set, zero value otherwise.
func (o *RestReportData) GetOpenedUniqueContactCount() int32 {
	if o == nil || IsNil(o.OpenedUniqueContactCount) {
		var ret int32
		return ret
	}
	return *o.OpenedUniqueContactCount
}

// GetOpenedUniqueContactCountOk returns a tuple with the OpenedUniqueContactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestReportData) GetOpenedUniqueContactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.OpenedUniqueContactCount) {
		return nil, false
	}
	return o.OpenedUniqueContactCount, true
}

// HasOpenedUniqueContactCount returns a boolean if a field has been set.
func (o *RestReportData) HasOpenedUniqueContactCount() bool {
	if o != nil && !IsNil(o.OpenedUniqueContactCount) {
		return true
	}

	return false
}

// SetOpenedUniqueContactCount gets a reference to the given int32 and assigns it to the OpenedUniqueContactCount field.
func (o *RestReportData) SetOpenedUniqueContactCount(v int32) {
	o.OpenedUniqueContactCount = &v
}

// GetSentContactCount returns the SentContactCount field value if set, zero value otherwise.
func (o *RestReportData) GetSentContactCount() int32 {
	if o == nil || IsNil(o.SentContactCount) {
		var ret int32
		return ret
	}
	return *o.SentContactCount
}

// GetSentContactCountOk returns a tuple with the SentContactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestReportData) GetSentContactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SentContactCount) {
		return nil, false
	}
	return o.SentContactCount, true
}

// HasSentContactCount returns a boolean if a field has been set.
func (o *RestReportData) HasSentContactCount() bool {
	if o != nil && !IsNil(o.SentContactCount) {
		return true
	}

	return false
}

// SetSentContactCount gets a reference to the given int32 and assigns it to the SentContactCount field.
func (o *RestReportData) SetSentContactCount(v int32) {
	o.SentContactCount = &v
}

// GetUnsubscribeContactCount returns the UnsubscribeContactCount field value if set, zero value otherwise.
func (o *RestReportData) GetUnsubscribeContactCount() int32 {
	if o == nil || IsNil(o.UnsubscribeContactCount) {
		var ret int32
		return ret
	}
	return *o.UnsubscribeContactCount
}

// GetUnsubscribeContactCountOk returns a tuple with the UnsubscribeContactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestReportData) GetUnsubscribeContactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UnsubscribeContactCount) {
		return nil, false
	}
	return o.UnsubscribeContactCount, true
}

// HasUnsubscribeContactCount returns a boolean if a field has been set.
func (o *RestReportData) HasUnsubscribeContactCount() bool {
	if o != nil && !IsNil(o.UnsubscribeContactCount) {
		return true
	}

	return false
}

// SetUnsubscribeContactCount gets a reference to the given int32 and assigns it to the UnsubscribeContactCount field.
func (o *RestReportData) SetUnsubscribeContactCount(v int32) {
	o.UnsubscribeContactCount = &v
}

// GetBounceContactCount returns the BounceContactCount field value if set, zero value otherwise.
func (o *RestReportData) GetBounceContactCount() int32 {
	if o == nil || IsNil(o.BounceContactCount) {
		var ret int32
		return ret
	}
	return *o.BounceContactCount
}

// GetBounceContactCountOk returns a tuple with the BounceContactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestReportData) GetBounceContactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BounceContactCount) {
		return nil, false
	}
	return o.BounceContactCount, true
}

// HasBounceContactCount returns a boolean if a field has been set.
func (o *RestReportData) HasBounceContactCount() bool {
	if o != nil && !IsNil(o.BounceContactCount) {
		return true
	}

	return false
}

// SetBounceContactCount gets a reference to the given int32 and assigns it to the BounceContactCount field.
func (o *RestReportData) SetBounceContactCount(v int32) {
	o.BounceContactCount = &v
}

// GetSpamContactCount returns the SpamContactCount field value if set, zero value otherwise.
func (o *RestReportData) GetSpamContactCount() int32 {
	if o == nil || IsNil(o.SpamContactCount) {
		var ret int32
		return ret
	}
	return *o.SpamContactCount
}

// GetSpamContactCountOk returns a tuple with the SpamContactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestReportData) GetSpamContactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SpamContactCount) {
		return nil, false
	}
	return o.SpamContactCount, true
}

// HasSpamContactCount returns a boolean if a field has been set.
func (o *RestReportData) HasSpamContactCount() bool {
	if o != nil && !IsNil(o.SpamContactCount) {
		return true
	}

	return false
}

// SetSpamContactCount gets a reference to the given int32 and assigns it to the SpamContactCount field.
func (o *RestReportData) SetSpamContactCount(v int32) {
	o.SpamContactCount = &v
}

// GetClickedContactCount returns the ClickedContactCount field value if set, zero value otherwise.
func (o *RestReportData) GetClickedContactCount() int32 {
	if o == nil || IsNil(o.ClickedContactCount) {
		var ret int32
		return ret
	}
	return *o.ClickedContactCount
}

// GetClickedContactCountOk returns a tuple with the ClickedContactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestReportData) GetClickedContactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ClickedContactCount) {
		return nil, false
	}
	return o.ClickedContactCount, true
}

// HasClickedContactCount returns a boolean if a field has been set.
func (o *RestReportData) HasClickedContactCount() bool {
	if o != nil && !IsNil(o.ClickedContactCount) {
		return true
	}

	return false
}

// SetClickedContactCount gets a reference to the given int32 and assigns it to the ClickedContactCount field.
func (o *RestReportData) SetClickedContactCount(v int32) {
	o.ClickedContactCount = &v
}

// GetOpenedContactCount returns the OpenedContactCount field value if set, zero value otherwise.
func (o *RestReportData) GetOpenedContactCount() int32 {
	if o == nil || IsNil(o.OpenedContactCount) {
		var ret int32
		return ret
	}
	return *o.OpenedContactCount
}

// GetOpenedContactCountOk returns a tuple with the OpenedContactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestReportData) GetOpenedContactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.OpenedContactCount) {
		return nil, false
	}
	return o.OpenedContactCount, true
}

// HasOpenedContactCount returns a boolean if a field has been set.
func (o *RestReportData) HasOpenedContactCount() bool {
	if o != nil && !IsNil(o.OpenedContactCount) {
		return true
	}

	return false
}

// SetOpenedContactCount gets a reference to the given int32 and assigns it to the OpenedContactCount field.
func (o *RestReportData) SetOpenedContactCount(v int32) {
	o.OpenedContactCount = &v
}

func (o RestReportData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestReportData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CampaignId) {
		toSerialize["campaignId"] = o.CampaignId
	}
	if !IsNil(o.LinkStats) {
		toSerialize["linkStats"] = o.LinkStats
	}
	if !IsNil(o.ClickedUniqueContactCount) {
		toSerialize["clickedUniqueContactCount"] = o.ClickedUniqueContactCount
	}
	if !IsNil(o.OpenedUniqueContactCount) {
		toSerialize["openedUniqueContactCount"] = o.OpenedUniqueContactCount
	}
	if !IsNil(o.SentContactCount) {
		toSerialize["sentContactCount"] = o.SentContactCount
	}
	if !IsNil(o.UnsubscribeContactCount) {
		toSerialize["unsubscribeContactCount"] = o.UnsubscribeContactCount
	}
	if !IsNil(o.BounceContactCount) {
		toSerialize["bounceContactCount"] = o.BounceContactCount
	}
	if !IsNil(o.SpamContactCount) {
		toSerialize["spamContactCount"] = o.SpamContactCount
	}
	if !IsNil(o.ClickedContactCount) {
		toSerialize["clickedContactCount"] = o.ClickedContactCount
	}
	if !IsNil(o.OpenedContactCount) {
		toSerialize["openedContactCount"] = o.OpenedContactCount
	}
	return toSerialize, nil
}

type NullableRestReportData struct {
	value *RestReportData
	isSet bool
}

func (v NullableRestReportData) Get() *RestReportData {
	return v.value
}

func (v *NullableRestReportData) Set(val *RestReportData) {
	v.value = val
	v.isSet = true
}

func (v NullableRestReportData) IsSet() bool {
	return v.isSet
}

func (v *NullableRestReportData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestReportData(val *RestReportData) *NullableRestReportData {
	return &NullableRestReportData{value: val, isSet: true}
}

func (v NullableRestReportData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestReportData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


