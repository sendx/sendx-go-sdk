/*
SendX REST API

# Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

API version: 1.0.0
Contact: support@sendx.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendx

import (
	"encoding/json"
)

// checks if the ReportData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportData{}

// ReportData Contains the report data for a given campaign
type ReportData struct {
	// The ID of the campaign
	CampaignId *string `json:"campaignId,omitempty"`
	// Statistics about the links clicked within the campaign
	LinkStats *map[string]int32 `json:"linkStats,omitempty"`
	// The total number of contacts that clicked on any link
	ClickedContactCount *int32 `json:"clickedContactCount,omitempty"`
	// The total number of contacts that opened the campaign email
	OpenedContactCount *int32 `json:"openedContactCount,omitempty"`
	// The total number of contacts that replied to the campaign email
	RepliedContactCount *int32 `json:"repliedContactCount,omitempty"`
	// The unique number of contacts that clicked on any link
	ClickedUniqueContactCount *int32 `json:"clickedUniqueContactCount,omitempty"`
	// The unique number of contacts that opened the campaign email
	OpenedUniqueContactCount *int32 `json:"openedUniqueContactCount,omitempty"`
	// The unique number of contacts that replied to the campaign email
	RepliedUniqueContactCount *int32 `json:"repliedUniqueContactCount,omitempty"`
	// The total number of contacts the campaign was sent to
	SentContactCount *int32 `json:"sentContactCount,omitempty"`
	// The total number of contacts that unsubscribed
	UnsubscribeContactCount *int32 `json:"unsubscribeContactCount,omitempty"`
	// The total number of bounced contacts
	BounceContactCount *int32 `json:"bounceContactCount,omitempty"`
	// The total number of contacts that marked the email as spam
	SpamContactCount *int32 `json:"spamContactCount,omitempty"`
	// The total revenue generated from the campaign email
	EmailRevenue *string `json:"emailRevenue,omitempty"`
	// The average revenue generated per recipient
	RevenuePerRecipient *string `json:"revenuePerRecipient,omitempty"`
	// The currency in which the revenue is measured
	Currency *string `json:"currency,omitempty"`
}

// NewReportData instantiates a new ReportData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportData() *ReportData {
	this := ReportData{}
	return &this
}

// NewReportDataWithDefaults instantiates a new ReportData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportDataWithDefaults() *ReportData {
	this := ReportData{}
	return &this
}

// GetCampaignId returns the CampaignId field value if set, zero value otherwise.
func (o *ReportData) GetCampaignId() string {
	if o == nil || IsNil(o.CampaignId) {
		var ret string
		return ret
	}
	return *o.CampaignId
}

// GetCampaignIdOk returns a tuple with the CampaignId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportData) GetCampaignIdOk() (*string, bool) {
	if o == nil || IsNil(o.CampaignId) {
		return nil, false
	}
	return o.CampaignId, true
}

// HasCampaignId returns a boolean if a field has been set.
func (o *ReportData) HasCampaignId() bool {
	if o != nil && !IsNil(o.CampaignId) {
		return true
	}

	return false
}

// SetCampaignId gets a reference to the given string and assigns it to the CampaignId field.
func (o *ReportData) SetCampaignId(v string) {
	o.CampaignId = &v
}

// GetLinkStats returns the LinkStats field value if set, zero value otherwise.
func (o *ReportData) GetLinkStats() map[string]int32 {
	if o == nil || IsNil(o.LinkStats) {
		var ret map[string]int32
		return ret
	}
	return *o.LinkStats
}

// GetLinkStatsOk returns a tuple with the LinkStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportData) GetLinkStatsOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.LinkStats) {
		return nil, false
	}
	return o.LinkStats, true
}

// HasLinkStats returns a boolean if a field has been set.
func (o *ReportData) HasLinkStats() bool {
	if o != nil && !IsNil(o.LinkStats) {
		return true
	}

	return false
}

// SetLinkStats gets a reference to the given map[string]int32 and assigns it to the LinkStats field.
func (o *ReportData) SetLinkStats(v map[string]int32) {
	o.LinkStats = &v
}

// GetClickedContactCount returns the ClickedContactCount field value if set, zero value otherwise.
func (o *ReportData) GetClickedContactCount() int32 {
	if o == nil || IsNil(o.ClickedContactCount) {
		var ret int32
		return ret
	}
	return *o.ClickedContactCount
}

// GetClickedContactCountOk returns a tuple with the ClickedContactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportData) GetClickedContactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ClickedContactCount) {
		return nil, false
	}
	return o.ClickedContactCount, true
}

// HasClickedContactCount returns a boolean if a field has been set.
func (o *ReportData) HasClickedContactCount() bool {
	if o != nil && !IsNil(o.ClickedContactCount) {
		return true
	}

	return false
}

// SetClickedContactCount gets a reference to the given int32 and assigns it to the ClickedContactCount field.
func (o *ReportData) SetClickedContactCount(v int32) {
	o.ClickedContactCount = &v
}

// GetOpenedContactCount returns the OpenedContactCount field value if set, zero value otherwise.
func (o *ReportData) GetOpenedContactCount() int32 {
	if o == nil || IsNil(o.OpenedContactCount) {
		var ret int32
		return ret
	}
	return *o.OpenedContactCount
}

// GetOpenedContactCountOk returns a tuple with the OpenedContactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportData) GetOpenedContactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.OpenedContactCount) {
		return nil, false
	}
	return o.OpenedContactCount, true
}

// HasOpenedContactCount returns a boolean if a field has been set.
func (o *ReportData) HasOpenedContactCount() bool {
	if o != nil && !IsNil(o.OpenedContactCount) {
		return true
	}

	return false
}

// SetOpenedContactCount gets a reference to the given int32 and assigns it to the OpenedContactCount field.
func (o *ReportData) SetOpenedContactCount(v int32) {
	o.OpenedContactCount = &v
}

// GetRepliedContactCount returns the RepliedContactCount field value if set, zero value otherwise.
func (o *ReportData) GetRepliedContactCount() int32 {
	if o == nil || IsNil(o.RepliedContactCount) {
		var ret int32
		return ret
	}
	return *o.RepliedContactCount
}

// GetRepliedContactCountOk returns a tuple with the RepliedContactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportData) GetRepliedContactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RepliedContactCount) {
		return nil, false
	}
	return o.RepliedContactCount, true
}

// HasRepliedContactCount returns a boolean if a field has been set.
func (o *ReportData) HasRepliedContactCount() bool {
	if o != nil && !IsNil(o.RepliedContactCount) {
		return true
	}

	return false
}

// SetRepliedContactCount gets a reference to the given int32 and assigns it to the RepliedContactCount field.
func (o *ReportData) SetRepliedContactCount(v int32) {
	o.RepliedContactCount = &v
}

// GetClickedUniqueContactCount returns the ClickedUniqueContactCount field value if set, zero value otherwise.
func (o *ReportData) GetClickedUniqueContactCount() int32 {
	if o == nil || IsNil(o.ClickedUniqueContactCount) {
		var ret int32
		return ret
	}
	return *o.ClickedUniqueContactCount
}

// GetClickedUniqueContactCountOk returns a tuple with the ClickedUniqueContactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportData) GetClickedUniqueContactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ClickedUniqueContactCount) {
		return nil, false
	}
	return o.ClickedUniqueContactCount, true
}

// HasClickedUniqueContactCount returns a boolean if a field has been set.
func (o *ReportData) HasClickedUniqueContactCount() bool {
	if o != nil && !IsNil(o.ClickedUniqueContactCount) {
		return true
	}

	return false
}

// SetClickedUniqueContactCount gets a reference to the given int32 and assigns it to the ClickedUniqueContactCount field.
func (o *ReportData) SetClickedUniqueContactCount(v int32) {
	o.ClickedUniqueContactCount = &v
}

// GetOpenedUniqueContactCount returns the OpenedUniqueContactCount field value if set, zero value otherwise.
func (o *ReportData) GetOpenedUniqueContactCount() int32 {
	if o == nil || IsNil(o.OpenedUniqueContactCount) {
		var ret int32
		return ret
	}
	return *o.OpenedUniqueContactCount
}

// GetOpenedUniqueContactCountOk returns a tuple with the OpenedUniqueContactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportData) GetOpenedUniqueContactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.OpenedUniqueContactCount) {
		return nil, false
	}
	return o.OpenedUniqueContactCount, true
}

// HasOpenedUniqueContactCount returns a boolean if a field has been set.
func (o *ReportData) HasOpenedUniqueContactCount() bool {
	if o != nil && !IsNil(o.OpenedUniqueContactCount) {
		return true
	}

	return false
}

// SetOpenedUniqueContactCount gets a reference to the given int32 and assigns it to the OpenedUniqueContactCount field.
func (o *ReportData) SetOpenedUniqueContactCount(v int32) {
	o.OpenedUniqueContactCount = &v
}

// GetRepliedUniqueContactCount returns the RepliedUniqueContactCount field value if set, zero value otherwise.
func (o *ReportData) GetRepliedUniqueContactCount() int32 {
	if o == nil || IsNil(o.RepliedUniqueContactCount) {
		var ret int32
		return ret
	}
	return *o.RepliedUniqueContactCount
}

// GetRepliedUniqueContactCountOk returns a tuple with the RepliedUniqueContactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportData) GetRepliedUniqueContactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RepliedUniqueContactCount) {
		return nil, false
	}
	return o.RepliedUniqueContactCount, true
}

// HasRepliedUniqueContactCount returns a boolean if a field has been set.
func (o *ReportData) HasRepliedUniqueContactCount() bool {
	if o != nil && !IsNil(o.RepliedUniqueContactCount) {
		return true
	}

	return false
}

// SetRepliedUniqueContactCount gets a reference to the given int32 and assigns it to the RepliedUniqueContactCount field.
func (o *ReportData) SetRepliedUniqueContactCount(v int32) {
	o.RepliedUniqueContactCount = &v
}

// GetSentContactCount returns the SentContactCount field value if set, zero value otherwise.
func (o *ReportData) GetSentContactCount() int32 {
	if o == nil || IsNil(o.SentContactCount) {
		var ret int32
		return ret
	}
	return *o.SentContactCount
}

// GetSentContactCountOk returns a tuple with the SentContactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportData) GetSentContactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SentContactCount) {
		return nil, false
	}
	return o.SentContactCount, true
}

// HasSentContactCount returns a boolean if a field has been set.
func (o *ReportData) HasSentContactCount() bool {
	if o != nil && !IsNil(o.SentContactCount) {
		return true
	}

	return false
}

// SetSentContactCount gets a reference to the given int32 and assigns it to the SentContactCount field.
func (o *ReportData) SetSentContactCount(v int32) {
	o.SentContactCount = &v
}

// GetUnsubscribeContactCount returns the UnsubscribeContactCount field value if set, zero value otherwise.
func (o *ReportData) GetUnsubscribeContactCount() int32 {
	if o == nil || IsNil(o.UnsubscribeContactCount) {
		var ret int32
		return ret
	}
	return *o.UnsubscribeContactCount
}

// GetUnsubscribeContactCountOk returns a tuple with the UnsubscribeContactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportData) GetUnsubscribeContactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UnsubscribeContactCount) {
		return nil, false
	}
	return o.UnsubscribeContactCount, true
}

// HasUnsubscribeContactCount returns a boolean if a field has been set.
func (o *ReportData) HasUnsubscribeContactCount() bool {
	if o != nil && !IsNil(o.UnsubscribeContactCount) {
		return true
	}

	return false
}

// SetUnsubscribeContactCount gets a reference to the given int32 and assigns it to the UnsubscribeContactCount field.
func (o *ReportData) SetUnsubscribeContactCount(v int32) {
	o.UnsubscribeContactCount = &v
}

// GetBounceContactCount returns the BounceContactCount field value if set, zero value otherwise.
func (o *ReportData) GetBounceContactCount() int32 {
	if o == nil || IsNil(o.BounceContactCount) {
		var ret int32
		return ret
	}
	return *o.BounceContactCount
}

// GetBounceContactCountOk returns a tuple with the BounceContactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportData) GetBounceContactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BounceContactCount) {
		return nil, false
	}
	return o.BounceContactCount, true
}

// HasBounceContactCount returns a boolean if a field has been set.
func (o *ReportData) HasBounceContactCount() bool {
	if o != nil && !IsNil(o.BounceContactCount) {
		return true
	}

	return false
}

// SetBounceContactCount gets a reference to the given int32 and assigns it to the BounceContactCount field.
func (o *ReportData) SetBounceContactCount(v int32) {
	o.BounceContactCount = &v
}

// GetSpamContactCount returns the SpamContactCount field value if set, zero value otherwise.
func (o *ReportData) GetSpamContactCount() int32 {
	if o == nil || IsNil(o.SpamContactCount) {
		var ret int32
		return ret
	}
	return *o.SpamContactCount
}

// GetSpamContactCountOk returns a tuple with the SpamContactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportData) GetSpamContactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SpamContactCount) {
		return nil, false
	}
	return o.SpamContactCount, true
}

// HasSpamContactCount returns a boolean if a field has been set.
func (o *ReportData) HasSpamContactCount() bool {
	if o != nil && !IsNil(o.SpamContactCount) {
		return true
	}

	return false
}

// SetSpamContactCount gets a reference to the given int32 and assigns it to the SpamContactCount field.
func (o *ReportData) SetSpamContactCount(v int32) {
	o.SpamContactCount = &v
}

// GetEmailRevenue returns the EmailRevenue field value if set, zero value otherwise.
func (o *ReportData) GetEmailRevenue() string {
	if o == nil || IsNil(o.EmailRevenue) {
		var ret string
		return ret
	}
	return *o.EmailRevenue
}

// GetEmailRevenueOk returns a tuple with the EmailRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportData) GetEmailRevenueOk() (*string, bool) {
	if o == nil || IsNil(o.EmailRevenue) {
		return nil, false
	}
	return o.EmailRevenue, true
}

// HasEmailRevenue returns a boolean if a field has been set.
func (o *ReportData) HasEmailRevenue() bool {
	if o != nil && !IsNil(o.EmailRevenue) {
		return true
	}

	return false
}

// SetEmailRevenue gets a reference to the given string and assigns it to the EmailRevenue field.
func (o *ReportData) SetEmailRevenue(v string) {
	o.EmailRevenue = &v
}

// GetRevenuePerRecipient returns the RevenuePerRecipient field value if set, zero value otherwise.
func (o *ReportData) GetRevenuePerRecipient() string {
	if o == nil || IsNil(o.RevenuePerRecipient) {
		var ret string
		return ret
	}
	return *o.RevenuePerRecipient
}

// GetRevenuePerRecipientOk returns a tuple with the RevenuePerRecipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportData) GetRevenuePerRecipientOk() (*string, bool) {
	if o == nil || IsNil(o.RevenuePerRecipient) {
		return nil, false
	}
	return o.RevenuePerRecipient, true
}

// HasRevenuePerRecipient returns a boolean if a field has been set.
func (o *ReportData) HasRevenuePerRecipient() bool {
	if o != nil && !IsNil(o.RevenuePerRecipient) {
		return true
	}

	return false
}

// SetRevenuePerRecipient gets a reference to the given string and assigns it to the RevenuePerRecipient field.
func (o *ReportData) SetRevenuePerRecipient(v string) {
	o.RevenuePerRecipient = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *ReportData) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportData) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *ReportData) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *ReportData) SetCurrency(v string) {
	o.Currency = &v
}

func (o ReportData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CampaignId) {
		toSerialize["campaignId"] = o.CampaignId
	}
	if !IsNil(o.LinkStats) {
		toSerialize["linkStats"] = o.LinkStats
	}
	if !IsNil(o.ClickedContactCount) {
		toSerialize["clickedContactCount"] = o.ClickedContactCount
	}
	if !IsNil(o.OpenedContactCount) {
		toSerialize["openedContactCount"] = o.OpenedContactCount
	}
	if !IsNil(o.RepliedContactCount) {
		toSerialize["repliedContactCount"] = o.RepliedContactCount
	}
	if !IsNil(o.ClickedUniqueContactCount) {
		toSerialize["clickedUniqueContactCount"] = o.ClickedUniqueContactCount
	}
	if !IsNil(o.OpenedUniqueContactCount) {
		toSerialize["openedUniqueContactCount"] = o.OpenedUniqueContactCount
	}
	if !IsNil(o.RepliedUniqueContactCount) {
		toSerialize["repliedUniqueContactCount"] = o.RepliedUniqueContactCount
	}
	if !IsNil(o.SentContactCount) {
		toSerialize["sentContactCount"] = o.SentContactCount
	}
	if !IsNil(o.UnsubscribeContactCount) {
		toSerialize["unsubscribeContactCount"] = o.UnsubscribeContactCount
	}
	if !IsNil(o.BounceContactCount) {
		toSerialize["bounceContactCount"] = o.BounceContactCount
	}
	if !IsNil(o.SpamContactCount) {
		toSerialize["spamContactCount"] = o.SpamContactCount
	}
	if !IsNil(o.EmailRevenue) {
		toSerialize["emailRevenue"] = o.EmailRevenue
	}
	if !IsNil(o.RevenuePerRecipient) {
		toSerialize["revenuePerRecipient"] = o.RevenuePerRecipient
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	return toSerialize, nil
}

type NullableReportData struct {
	value *ReportData
	isSet bool
}

func (v NullableReportData) Get() *ReportData {
	return v.value
}

func (v *NullableReportData) Set(val *ReportData) {
	v.value = val
	v.isSet = true
}

func (v NullableReportData) IsSet() bool {
	return v.isSet
}

func (v *NullableReportData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportData(val *ReportData) *NullableReportData {
	return &NullableReportData{value: val, isSet: true}
}

func (v NullableReportData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


