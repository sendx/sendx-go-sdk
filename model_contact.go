/*
SendX REST API

# Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

API version: 1.0.0
Contact: support@sendx.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendx

import (
	"encoding/json"
	"time"
)

// checks if the Contact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Contact{}

// Contact struct for Contact
type Contact struct {
	// Identifier for the contact.
	Id *string `json:"id,omitempty"`
	// The first name of the contact.
	FirstName *string `json:"firstName,omitempty"`
	// The last name of the contact.
	LastName *string `json:"lastName,omitempty"`
	// The email address of the contact.
	Email *string `json:"email,omitempty"`
	// The company of the contact.
	Company *string `json:"company,omitempty"`
	// Custom fields and their values
	CustomFields *map[string]string `json:"customFields,omitempty"`
	// Indicates if the contact has unsubscribed from emails.
	Unsubscribed *bool `json:"unsubscribed,omitempty"`
	// Indicates if the contact's email has bounced.
	Bounced *bool `json:"bounced,omitempty"`
	// Indicates if the contact marked the email as spam.
	Spam *bool `json:"spam,omitempty"`
	// The date and time when the contact was created.
	Created *time.Time `json:"created,omitempty"`
	// The date and time when the contact was last updated.
	Updated *time.Time `json:"updated,omitempty"`
	// Indicates if the contact is blocked from receiving emails.
	Blocked *bool `json:"blocked,omitempty"`
	// Indicates if emails to this contact were dropped.
	Dropped *bool `json:"dropped,omitempty"`
	// Lifetime value (LTV) of the contact in currency units.
	LTV *int32 `json:"LTV,omitempty"`
	// The source from which the contact was added. Possible values: 
	ContactSource *int32 `json:"contactSource,omitempty"`
	// The last known IP address tracked for the contact.
	LastTrackedIp *string `json:"lastTrackedIp,omitempty"`
	// A list of `lists` ids the contact is subscribed to.
	Lists []string `json:"lists,omitempty"`
	// `Tag` ids associated with the contact for segmentation or categorization.
	Tags []string `json:"tags,omitempty"`
}

// NewContact instantiates a new Contact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContact() *Contact {
	this := Contact{}
	return &this
}

// NewContactWithDefaults instantiates a new Contact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactWithDefaults() *Contact {
	this := Contact{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Contact) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Contact) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Contact) SetId(v string) {
	o.Id = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *Contact) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *Contact) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *Contact) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *Contact) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *Contact) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *Contact) SetLastName(v string) {
	o.LastName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Contact) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Contact) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Contact) SetEmail(v string) {
	o.Email = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *Contact) GetCompany() string {
	if o == nil || IsNil(o.Company) {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetCompanyOk() (*string, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *Contact) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *Contact) SetCompany(v string) {
	o.Company = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Contact) GetCustomFields() map[string]string {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]string
		return ret
	}
	return *o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetCustomFieldsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Contact) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]string and assigns it to the CustomFields field.
func (o *Contact) SetCustomFields(v map[string]string) {
	o.CustomFields = &v
}

// GetUnsubscribed returns the Unsubscribed field value if set, zero value otherwise.
func (o *Contact) GetUnsubscribed() bool {
	if o == nil || IsNil(o.Unsubscribed) {
		var ret bool
		return ret
	}
	return *o.Unsubscribed
}

// GetUnsubscribedOk returns a tuple with the Unsubscribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetUnsubscribedOk() (*bool, bool) {
	if o == nil || IsNil(o.Unsubscribed) {
		return nil, false
	}
	return o.Unsubscribed, true
}

// HasUnsubscribed returns a boolean if a field has been set.
func (o *Contact) HasUnsubscribed() bool {
	if o != nil && !IsNil(o.Unsubscribed) {
		return true
	}

	return false
}

// SetUnsubscribed gets a reference to the given bool and assigns it to the Unsubscribed field.
func (o *Contact) SetUnsubscribed(v bool) {
	o.Unsubscribed = &v
}

// GetBounced returns the Bounced field value if set, zero value otherwise.
func (o *Contact) GetBounced() bool {
	if o == nil || IsNil(o.Bounced) {
		var ret bool
		return ret
	}
	return *o.Bounced
}

// GetBouncedOk returns a tuple with the Bounced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetBouncedOk() (*bool, bool) {
	if o == nil || IsNil(o.Bounced) {
		return nil, false
	}
	return o.Bounced, true
}

// HasBounced returns a boolean if a field has been set.
func (o *Contact) HasBounced() bool {
	if o != nil && !IsNil(o.Bounced) {
		return true
	}

	return false
}

// SetBounced gets a reference to the given bool and assigns it to the Bounced field.
func (o *Contact) SetBounced(v bool) {
	o.Bounced = &v
}

// GetSpam returns the Spam field value if set, zero value otherwise.
func (o *Contact) GetSpam() bool {
	if o == nil || IsNil(o.Spam) {
		var ret bool
		return ret
	}
	return *o.Spam
}

// GetSpamOk returns a tuple with the Spam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetSpamOk() (*bool, bool) {
	if o == nil || IsNil(o.Spam) {
		return nil, false
	}
	return o.Spam, true
}

// HasSpam returns a boolean if a field has been set.
func (o *Contact) HasSpam() bool {
	if o != nil && !IsNil(o.Spam) {
		return true
	}

	return false
}

// SetSpam gets a reference to the given bool and assigns it to the Spam field.
func (o *Contact) SetSpam(v bool) {
	o.Spam = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Contact) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Contact) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Contact) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *Contact) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *Contact) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *Contact) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetBlocked returns the Blocked field value if set, zero value otherwise.
func (o *Contact) GetBlocked() bool {
	if o == nil || IsNil(o.Blocked) {
		var ret bool
		return ret
	}
	return *o.Blocked
}

// GetBlockedOk returns a tuple with the Blocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetBlockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Blocked) {
		return nil, false
	}
	return o.Blocked, true
}

// HasBlocked returns a boolean if a field has been set.
func (o *Contact) HasBlocked() bool {
	if o != nil && !IsNil(o.Blocked) {
		return true
	}

	return false
}

// SetBlocked gets a reference to the given bool and assigns it to the Blocked field.
func (o *Contact) SetBlocked(v bool) {
	o.Blocked = &v
}

// GetDropped returns the Dropped field value if set, zero value otherwise.
func (o *Contact) GetDropped() bool {
	if o == nil || IsNil(o.Dropped) {
		var ret bool
		return ret
	}
	return *o.Dropped
}

// GetDroppedOk returns a tuple with the Dropped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetDroppedOk() (*bool, bool) {
	if o == nil || IsNil(o.Dropped) {
		return nil, false
	}
	return o.Dropped, true
}

// HasDropped returns a boolean if a field has been set.
func (o *Contact) HasDropped() bool {
	if o != nil && !IsNil(o.Dropped) {
		return true
	}

	return false
}

// SetDropped gets a reference to the given bool and assigns it to the Dropped field.
func (o *Contact) SetDropped(v bool) {
	o.Dropped = &v
}

// GetLTV returns the LTV field value if set, zero value otherwise.
func (o *Contact) GetLTV() int32 {
	if o == nil || IsNil(o.LTV) {
		var ret int32
		return ret
	}
	return *o.LTV
}

// GetLTVOk returns a tuple with the LTV field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetLTVOk() (*int32, bool) {
	if o == nil || IsNil(o.LTV) {
		return nil, false
	}
	return o.LTV, true
}

// HasLTV returns a boolean if a field has been set.
func (o *Contact) HasLTV() bool {
	if o != nil && !IsNil(o.LTV) {
		return true
	}

	return false
}

// SetLTV gets a reference to the given int32 and assigns it to the LTV field.
func (o *Contact) SetLTV(v int32) {
	o.LTV = &v
}

// GetContactSource returns the ContactSource field value if set, zero value otherwise.
func (o *Contact) GetContactSource() int32 {
	if o == nil || IsNil(o.ContactSource) {
		var ret int32
		return ret
	}
	return *o.ContactSource
}

// GetContactSourceOk returns a tuple with the ContactSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetContactSourceOk() (*int32, bool) {
	if o == nil || IsNil(o.ContactSource) {
		return nil, false
	}
	return o.ContactSource, true
}

// HasContactSource returns a boolean if a field has been set.
func (o *Contact) HasContactSource() bool {
	if o != nil && !IsNil(o.ContactSource) {
		return true
	}

	return false
}

// SetContactSource gets a reference to the given int32 and assigns it to the ContactSource field.
func (o *Contact) SetContactSource(v int32) {
	o.ContactSource = &v
}

// GetLastTrackedIp returns the LastTrackedIp field value if set, zero value otherwise.
func (o *Contact) GetLastTrackedIp() string {
	if o == nil || IsNil(o.LastTrackedIp) {
		var ret string
		return ret
	}
	return *o.LastTrackedIp
}

// GetLastTrackedIpOk returns a tuple with the LastTrackedIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetLastTrackedIpOk() (*string, bool) {
	if o == nil || IsNil(o.LastTrackedIp) {
		return nil, false
	}
	return o.LastTrackedIp, true
}

// HasLastTrackedIp returns a boolean if a field has been set.
func (o *Contact) HasLastTrackedIp() bool {
	if o != nil && !IsNil(o.LastTrackedIp) {
		return true
	}

	return false
}

// SetLastTrackedIp gets a reference to the given string and assigns it to the LastTrackedIp field.
func (o *Contact) SetLastTrackedIp(v string) {
	o.LastTrackedIp = &v
}

// GetLists returns the Lists field value if set, zero value otherwise.
func (o *Contact) GetLists() []string {
	if o == nil || IsNil(o.Lists) {
		var ret []string
		return ret
	}
	return o.Lists
}

// GetListsOk returns a tuple with the Lists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetListsOk() ([]string, bool) {
	if o == nil || IsNil(o.Lists) {
		return nil, false
	}
	return o.Lists, true
}

// HasLists returns a boolean if a field has been set.
func (o *Contact) HasLists() bool {
	if o != nil && !IsNil(o.Lists) {
		return true
	}

	return false
}

// SetLists gets a reference to the given []string and assigns it to the Lists field.
func (o *Contact) SetLists(v []string) {
	o.Lists = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Contact) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Contact) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Contact) SetTags(v []string) {
	o.Tags = v
}

func (o Contact) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Contact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	if !IsNil(o.Unsubscribed) {
		toSerialize["unsubscribed"] = o.Unsubscribed
	}
	if !IsNil(o.Bounced) {
		toSerialize["bounced"] = o.Bounced
	}
	if !IsNil(o.Spam) {
		toSerialize["spam"] = o.Spam
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.Blocked) {
		toSerialize["blocked"] = o.Blocked
	}
	if !IsNil(o.Dropped) {
		toSerialize["dropped"] = o.Dropped
	}
	if !IsNil(o.LTV) {
		toSerialize["LTV"] = o.LTV
	}
	if !IsNil(o.ContactSource) {
		toSerialize["contactSource"] = o.ContactSource
	}
	if !IsNil(o.LastTrackedIp) {
		toSerialize["lastTrackedIp"] = o.LastTrackedIp
	}
	if !IsNil(o.Lists) {
		toSerialize["lists"] = o.Lists
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableContact struct {
	value *Contact
	isSet bool
}

func (v NullableContact) Get() *Contact {
	return v.value
}

func (v *NullableContact) Set(val *Contact) {
	v.value = val
	v.isSet = true
}

func (v NullableContact) IsSet() bool {
	return v.isSet
}

func (v *NullableContact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContact(val *Contact) *NullableContact {
	return &NullableContact{value: val, isSet: true}
}

func (v NullableContact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


