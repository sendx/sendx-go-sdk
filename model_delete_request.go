/*
SendX REST API

# Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

API version: 1.0.0
Contact: support@sendx.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendx

import (
	"encoding/json"
)

// checks if the DeleteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteRequest{}

// DeleteRequest struct for DeleteRequest
type DeleteRequest struct {
	// Indicates whether to delete associated contacts.
	DeleteContacts *bool `json:"deleteContacts,omitempty"`
}

// NewDeleteRequest instantiates a new DeleteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteRequest() *DeleteRequest {
	this := DeleteRequest{}
	return &this
}

// NewDeleteRequestWithDefaults instantiates a new DeleteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteRequestWithDefaults() *DeleteRequest {
	this := DeleteRequest{}
	return &this
}

// GetDeleteContacts returns the DeleteContacts field value if set, zero value otherwise.
func (o *DeleteRequest) GetDeleteContacts() bool {
	if o == nil || IsNil(o.DeleteContacts) {
		var ret bool
		return ret
	}
	return *o.DeleteContacts
}

// GetDeleteContactsOk returns a tuple with the DeleteContacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteRequest) GetDeleteContactsOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteContacts) {
		return nil, false
	}
	return o.DeleteContacts, true
}

// HasDeleteContacts returns a boolean if a field has been set.
func (o *DeleteRequest) HasDeleteContacts() bool {
	if o != nil && !IsNil(o.DeleteContacts) {
		return true
	}

	return false
}

// SetDeleteContacts gets a reference to the given bool and assigns it to the DeleteContacts field.
func (o *DeleteRequest) SetDeleteContacts(v bool) {
	o.DeleteContacts = &v
}

func (o DeleteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeleteContacts) {
		toSerialize["deleteContacts"] = o.DeleteContacts
	}
	return toSerialize, nil
}

type NullableDeleteRequest struct {
	value *DeleteRequest
	isSet bool
}

func (v NullableDeleteRequest) Get() *DeleteRequest {
	return v.value
}

func (v *NullableDeleteRequest) Set(val *DeleteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteRequest(val *DeleteRequest) *NullableDeleteRequest {
	return &NullableDeleteRequest{value: val, isSet: true}
}

func (v NullableDeleteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


