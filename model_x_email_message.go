/*
SendX REST API

# SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 

API version: 1.0.0
Contact: hello@sendx.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the XEmailMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &XEmailMessage{}

// XEmailMessage struct for XEmailMessage
type XEmailMessage struct {
	From XFrom `json:"from"`
	To []XTo `json:"to"`
	ReplyTo *XReplyTo `json:"replyTo,omitempty"`
	Subject string `json:"subject"`
	HtmlBody string `json:"htmlBody"`
	TextBody *string `json:"textBody,omitempty"`
	Headers map[string]string `json:"headers,omitempty"`
	// Template identifier
	Template *string `json:"template,omitempty"`
}

type _XEmailMessage XEmailMessage

// NewXEmailMessage instantiates a new XEmailMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewXEmailMessage(from XFrom, to []XTo, subject string, htmlBody string) *XEmailMessage {
	this := XEmailMessage{}
	this.From = from
	this.To = to
	this.Subject = subject
	this.HtmlBody = htmlBody
	return &this
}

// NewXEmailMessageWithDefaults instantiates a new XEmailMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewXEmailMessageWithDefaults() *XEmailMessage {
	this := XEmailMessage{}
	return &this
}

// GetFrom returns the From field value
func (o *XEmailMessage) GetFrom() XFrom {
	if o == nil {
		var ret XFrom
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *XEmailMessage) GetFromOk() (*XFrom, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *XEmailMessage) SetFrom(v XFrom) {
	o.From = v
}

// GetTo returns the To field value
func (o *XEmailMessage) GetTo() []XTo {
	if o == nil {
		var ret []XTo
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *XEmailMessage) GetToOk() ([]XTo, bool) {
	if o == nil {
		return nil, false
	}
	return o.To, true
}

// SetTo sets field value
func (o *XEmailMessage) SetTo(v []XTo) {
	o.To = v
}

// GetReplyTo returns the ReplyTo field value if set, zero value otherwise.
func (o *XEmailMessage) GetReplyTo() XReplyTo {
	if o == nil || IsNil(o.ReplyTo) {
		var ret XReplyTo
		return ret
	}
	return *o.ReplyTo
}

// GetReplyToOk returns a tuple with the ReplyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *XEmailMessage) GetReplyToOk() (*XReplyTo, bool) {
	if o == nil || IsNil(o.ReplyTo) {
		return nil, false
	}
	return o.ReplyTo, true
}

// HasReplyTo returns a boolean if a field has been set.
func (o *XEmailMessage) HasReplyTo() bool {
	if o != nil && !IsNil(o.ReplyTo) {
		return true
	}

	return false
}

// SetReplyTo gets a reference to the given XReplyTo and assigns it to the ReplyTo field.
func (o *XEmailMessage) SetReplyTo(v XReplyTo) {
	o.ReplyTo = &v
}

// GetSubject returns the Subject field value
func (o *XEmailMessage) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *XEmailMessage) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *XEmailMessage) SetSubject(v string) {
	o.Subject = v
}

// GetHtmlBody returns the HtmlBody field value
func (o *XEmailMessage) GetHtmlBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HtmlBody
}

// GetHtmlBodyOk returns a tuple with the HtmlBody field value
// and a boolean to check if the value has been set.
func (o *XEmailMessage) GetHtmlBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HtmlBody, true
}

// SetHtmlBody sets field value
func (o *XEmailMessage) SetHtmlBody(v string) {
	o.HtmlBody = v
}

// GetTextBody returns the TextBody field value if set, zero value otherwise.
func (o *XEmailMessage) GetTextBody() string {
	if o == nil || IsNil(o.TextBody) {
		var ret string
		return ret
	}
	return *o.TextBody
}

// GetTextBodyOk returns a tuple with the TextBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *XEmailMessage) GetTextBodyOk() (*string, bool) {
	if o == nil || IsNil(o.TextBody) {
		return nil, false
	}
	return o.TextBody, true
}

// HasTextBody returns a boolean if a field has been set.
func (o *XEmailMessage) HasTextBody() bool {
	if o != nil && !IsNil(o.TextBody) {
		return true
	}

	return false
}

// SetTextBody gets a reference to the given string and assigns it to the TextBody field.
func (o *XEmailMessage) SetTextBody(v string) {
	o.TextBody = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *XEmailMessage) GetHeaders() map[string]string {
	if o == nil || IsNil(o.Headers) {
		var ret map[string]string
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *XEmailMessage) GetHeadersOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return map[string]string{}, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *XEmailMessage) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *XEmailMessage) SetHeaders(v map[string]string) {
	o.Headers = v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *XEmailMessage) GetTemplate() string {
	if o == nil || IsNil(o.Template) {
		var ret string
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *XEmailMessage) GetTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *XEmailMessage) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given string and assigns it to the Template field.
func (o *XEmailMessage) SetTemplate(v string) {
	o.Template = &v
}

func (o XEmailMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o XEmailMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["from"] = o.From
	toSerialize["to"] = o.To
	if !IsNil(o.ReplyTo) {
		toSerialize["replyTo"] = o.ReplyTo
	}
	toSerialize["subject"] = o.Subject
	toSerialize["htmlBody"] = o.HtmlBody
	if !IsNil(o.TextBody) {
		toSerialize["textBody"] = o.TextBody
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	return toSerialize, nil
}

func (o *XEmailMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"from",
		"to",
		"subject",
		"htmlBody",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varXEmailMessage := _XEmailMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varXEmailMessage)

	if err != nil {
		return err
	}

	*o = XEmailMessage(varXEmailMessage)

	return err
}

type NullableXEmailMessage struct {
	value *XEmailMessage
	isSet bool
}

func (v NullableXEmailMessage) Get() *XEmailMessage {
	return v.value
}

func (v *NullableXEmailMessage) Set(val *XEmailMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableXEmailMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableXEmailMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableXEmailMessage(val *XEmailMessage) *NullableXEmailMessage {
	return &NullableXEmailMessage{value: val, isSet: true}
}

func (v NullableXEmailMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableXEmailMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


