/*
SendX REST API

# Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

API version: 1.0.0
Contact: support@sendx.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendx

import (
	"encoding/json"
)

// checks if the IdentifyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentifyResponse{}

// IdentifyResponse struct for IdentifyResponse
type IdentifyResponse struct {
	Status *string `json:"status,omitempty"`
	Message *string `json:"message,omitempty"`
	Data *Contact `json:"data,omitempty"`
}

// NewIdentifyResponse instantiates a new IdentifyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentifyResponse() *IdentifyResponse {
	this := IdentifyResponse{}
	return &this
}

// NewIdentifyResponseWithDefaults instantiates a new IdentifyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentifyResponseWithDefaults() *IdentifyResponse {
	this := IdentifyResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IdentifyResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentifyResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IdentifyResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *IdentifyResponse) SetStatus(v string) {
	o.Status = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *IdentifyResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentifyResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *IdentifyResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *IdentifyResponse) SetMessage(v string) {
	o.Message = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *IdentifyResponse) GetData() Contact {
	if o == nil || IsNil(o.Data) {
		var ret Contact
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentifyResponse) GetDataOk() (*Contact, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *IdentifyResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given Contact and assigns it to the Data field.
func (o *IdentifyResponse) SetData(v Contact) {
	o.Data = &v
}

func (o IdentifyResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentifyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableIdentifyResponse struct {
	value *IdentifyResponse
	isSet bool
}

func (v NullableIdentifyResponse) Get() *IdentifyResponse {
	return v.value
}

func (v *NullableIdentifyResponse) Set(val *IdentifyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentifyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentifyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentifyResponse(val *IdentifyResponse) *NullableIdentifyResponse {
	return &NullableIdentifyResponse{value: val, isSet: true}
}

func (v NullableIdentifyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentifyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


