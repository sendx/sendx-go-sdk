/*
SendX REST API

# Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

API version: 1.0.0
Contact: support@sendx.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendx

import (
	"encoding/json"
)

// checks if the TrackRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackRequest{}

// TrackRequest struct for TrackRequest
type TrackRequest struct {
	// Email address of the contact to track.
	Email *Email `json:"email,omitempty"`
	AddTags []string `json:"addTags,omitempty"`
	RemoveTags []string `json:"removeTags,omitempty"`
}

// NewTrackRequest instantiates a new TrackRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackRequest() *TrackRequest {
	this := TrackRequest{}
	return &this
}

// NewTrackRequestWithDefaults instantiates a new TrackRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackRequestWithDefaults() *TrackRequest {
	this := TrackRequest{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *TrackRequest) GetEmail() Email {
	if o == nil || IsNil(o.Email) {
		var ret Email
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackRequest) GetEmailOk() (*Email, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *TrackRequest) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given Email and assigns it to the Email field.
func (o *TrackRequest) SetEmail(v Email) {
	o.Email = &v
}

// GetAddTags returns the AddTags field value if set, zero value otherwise.
func (o *TrackRequest) GetAddTags() []string {
	if o == nil || IsNil(o.AddTags) {
		var ret []string
		return ret
	}
	return o.AddTags
}

// GetAddTagsOk returns a tuple with the AddTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackRequest) GetAddTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.AddTags) {
		return nil, false
	}
	return o.AddTags, true
}

// HasAddTags returns a boolean if a field has been set.
func (o *TrackRequest) HasAddTags() bool {
	if o != nil && !IsNil(o.AddTags) {
		return true
	}

	return false
}

// SetAddTags gets a reference to the given []string and assigns it to the AddTags field.
func (o *TrackRequest) SetAddTags(v []string) {
	o.AddTags = v
}

// GetRemoveTags returns the RemoveTags field value if set, zero value otherwise.
func (o *TrackRequest) GetRemoveTags() []string {
	if o == nil || IsNil(o.RemoveTags) {
		var ret []string
		return ret
	}
	return o.RemoveTags
}

// GetRemoveTagsOk returns a tuple with the RemoveTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackRequest) GetRemoveTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.RemoveTags) {
		return nil, false
	}
	return o.RemoveTags, true
}

// HasRemoveTags returns a boolean if a field has been set.
func (o *TrackRequest) HasRemoveTags() bool {
	if o != nil && !IsNil(o.RemoveTags) {
		return true
	}

	return false
}

// SetRemoveTags gets a reference to the given []string and assigns it to the RemoveTags field.
func (o *TrackRequest) SetRemoveTags(v []string) {
	o.RemoveTags = v
}

func (o TrackRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.AddTags) {
		toSerialize["addTags"] = o.AddTags
	}
	if !IsNil(o.RemoveTags) {
		toSerialize["removeTags"] = o.RemoveTags
	}
	return toSerialize, nil
}

type NullableTrackRequest struct {
	value *TrackRequest
	isSet bool
}

func (v NullableTrackRequest) Get() *TrackRequest {
	return v.value
}

func (v *NullableTrackRequest) Set(val *TrackRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackRequest(val *TrackRequest) *NullableTrackRequest {
	return &NullableTrackRequest{value: val, isSet: true}
}

func (v NullableTrackRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


