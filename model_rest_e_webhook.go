/*
SendX REST API

# SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 

API version: 1.0.0
Contact: hello@sendx.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestEWebhook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestEWebhook{}

// RestEWebhook struct for RestEWebhook
type RestEWebhook struct {
	// Webhook endpoint URL
	Url string `json:"url"`
	// Whether webhook is enabled
	Enabled bool `json:"enabled"`
	// Trigger webhook when a contact unsubscribes
	Unsubscribed *bool `json:"unsubscribed,omitempty"`
	// Trigger webhook when an email is dropped
	Dropped *bool `json:"dropped,omitempty"`
	// Trigger webhook when an email bounces
	Bounced *bool `json:"bounced,omitempty"`
	// Trigger webhook when an email is marked as spam
	MarkedSpam *bool `json:"markedSpam,omitempty"`
	// Trigger webhook when a link in the email is clicked
	Clicked *bool `json:"clicked,omitempty"`
	// Trigger webhook when an email is opened
	Opened *bool `json:"opened,omitempty"`
	// Trigger webhook when a new contact is created
	ContactCreated *bool `json:"contactCreated,omitempty"`
}

type _RestEWebhook RestEWebhook

// NewRestEWebhook instantiates a new RestEWebhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestEWebhook(url string, enabled bool) *RestEWebhook {
	this := RestEWebhook{}
	this.Url = url
	this.Enabled = enabled
	var unsubscribed bool = false
	this.Unsubscribed = &unsubscribed
	var dropped bool = false
	this.Dropped = &dropped
	var bounced bool = false
	this.Bounced = &bounced
	var markedSpam bool = false
	this.MarkedSpam = &markedSpam
	var clicked bool = false
	this.Clicked = &clicked
	var opened bool = false
	this.Opened = &opened
	var contactCreated bool = false
	this.ContactCreated = &contactCreated
	return &this
}

// NewRestEWebhookWithDefaults instantiates a new RestEWebhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestEWebhookWithDefaults() *RestEWebhook {
	this := RestEWebhook{}
	var enabled bool = true
	this.Enabled = enabled
	var unsubscribed bool = false
	this.Unsubscribed = &unsubscribed
	var dropped bool = false
	this.Dropped = &dropped
	var bounced bool = false
	this.Bounced = &bounced
	var markedSpam bool = false
	this.MarkedSpam = &markedSpam
	var clicked bool = false
	this.Clicked = &clicked
	var opened bool = false
	this.Opened = &opened
	var contactCreated bool = false
	this.ContactCreated = &contactCreated
	return &this
}

// GetUrl returns the Url field value
func (o *RestEWebhook) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *RestEWebhook) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *RestEWebhook) SetUrl(v string) {
	o.Url = v
}

// GetEnabled returns the Enabled field value
func (o *RestEWebhook) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *RestEWebhook) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *RestEWebhook) SetEnabled(v bool) {
	o.Enabled = v
}

// GetUnsubscribed returns the Unsubscribed field value if set, zero value otherwise.
func (o *RestEWebhook) GetUnsubscribed() bool {
	if o == nil || IsNil(o.Unsubscribed) {
		var ret bool
		return ret
	}
	return *o.Unsubscribed
}

// GetUnsubscribedOk returns a tuple with the Unsubscribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEWebhook) GetUnsubscribedOk() (*bool, bool) {
	if o == nil || IsNil(o.Unsubscribed) {
		return nil, false
	}
	return o.Unsubscribed, true
}

// HasUnsubscribed returns a boolean if a field has been set.
func (o *RestEWebhook) HasUnsubscribed() bool {
	if o != nil && !IsNil(o.Unsubscribed) {
		return true
	}

	return false
}

// SetUnsubscribed gets a reference to the given bool and assigns it to the Unsubscribed field.
func (o *RestEWebhook) SetUnsubscribed(v bool) {
	o.Unsubscribed = &v
}

// GetDropped returns the Dropped field value if set, zero value otherwise.
func (o *RestEWebhook) GetDropped() bool {
	if o == nil || IsNil(o.Dropped) {
		var ret bool
		return ret
	}
	return *o.Dropped
}

// GetDroppedOk returns a tuple with the Dropped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEWebhook) GetDroppedOk() (*bool, bool) {
	if o == nil || IsNil(o.Dropped) {
		return nil, false
	}
	return o.Dropped, true
}

// HasDropped returns a boolean if a field has been set.
func (o *RestEWebhook) HasDropped() bool {
	if o != nil && !IsNil(o.Dropped) {
		return true
	}

	return false
}

// SetDropped gets a reference to the given bool and assigns it to the Dropped field.
func (o *RestEWebhook) SetDropped(v bool) {
	o.Dropped = &v
}

// GetBounced returns the Bounced field value if set, zero value otherwise.
func (o *RestEWebhook) GetBounced() bool {
	if o == nil || IsNil(o.Bounced) {
		var ret bool
		return ret
	}
	return *o.Bounced
}

// GetBouncedOk returns a tuple with the Bounced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEWebhook) GetBouncedOk() (*bool, bool) {
	if o == nil || IsNil(o.Bounced) {
		return nil, false
	}
	return o.Bounced, true
}

// HasBounced returns a boolean if a field has been set.
func (o *RestEWebhook) HasBounced() bool {
	if o != nil && !IsNil(o.Bounced) {
		return true
	}

	return false
}

// SetBounced gets a reference to the given bool and assigns it to the Bounced field.
func (o *RestEWebhook) SetBounced(v bool) {
	o.Bounced = &v
}

// GetMarkedSpam returns the MarkedSpam field value if set, zero value otherwise.
func (o *RestEWebhook) GetMarkedSpam() bool {
	if o == nil || IsNil(o.MarkedSpam) {
		var ret bool
		return ret
	}
	return *o.MarkedSpam
}

// GetMarkedSpamOk returns a tuple with the MarkedSpam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEWebhook) GetMarkedSpamOk() (*bool, bool) {
	if o == nil || IsNil(o.MarkedSpam) {
		return nil, false
	}
	return o.MarkedSpam, true
}

// HasMarkedSpam returns a boolean if a field has been set.
func (o *RestEWebhook) HasMarkedSpam() bool {
	if o != nil && !IsNil(o.MarkedSpam) {
		return true
	}

	return false
}

// SetMarkedSpam gets a reference to the given bool and assigns it to the MarkedSpam field.
func (o *RestEWebhook) SetMarkedSpam(v bool) {
	o.MarkedSpam = &v
}

// GetClicked returns the Clicked field value if set, zero value otherwise.
func (o *RestEWebhook) GetClicked() bool {
	if o == nil || IsNil(o.Clicked) {
		var ret bool
		return ret
	}
	return *o.Clicked
}

// GetClickedOk returns a tuple with the Clicked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEWebhook) GetClickedOk() (*bool, bool) {
	if o == nil || IsNil(o.Clicked) {
		return nil, false
	}
	return o.Clicked, true
}

// HasClicked returns a boolean if a field has been set.
func (o *RestEWebhook) HasClicked() bool {
	if o != nil && !IsNil(o.Clicked) {
		return true
	}

	return false
}

// SetClicked gets a reference to the given bool and assigns it to the Clicked field.
func (o *RestEWebhook) SetClicked(v bool) {
	o.Clicked = &v
}

// GetOpened returns the Opened field value if set, zero value otherwise.
func (o *RestEWebhook) GetOpened() bool {
	if o == nil || IsNil(o.Opened) {
		var ret bool
		return ret
	}
	return *o.Opened
}

// GetOpenedOk returns a tuple with the Opened field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEWebhook) GetOpenedOk() (*bool, bool) {
	if o == nil || IsNil(o.Opened) {
		return nil, false
	}
	return o.Opened, true
}

// HasOpened returns a boolean if a field has been set.
func (o *RestEWebhook) HasOpened() bool {
	if o != nil && !IsNil(o.Opened) {
		return true
	}

	return false
}

// SetOpened gets a reference to the given bool and assigns it to the Opened field.
func (o *RestEWebhook) SetOpened(v bool) {
	o.Opened = &v
}

// GetContactCreated returns the ContactCreated field value if set, zero value otherwise.
func (o *RestEWebhook) GetContactCreated() bool {
	if o == nil || IsNil(o.ContactCreated) {
		var ret bool
		return ret
	}
	return *o.ContactCreated
}

// GetContactCreatedOk returns a tuple with the ContactCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEWebhook) GetContactCreatedOk() (*bool, bool) {
	if o == nil || IsNil(o.ContactCreated) {
		return nil, false
	}
	return o.ContactCreated, true
}

// HasContactCreated returns a boolean if a field has been set.
func (o *RestEWebhook) HasContactCreated() bool {
	if o != nil && !IsNil(o.ContactCreated) {
		return true
	}

	return false
}

// SetContactCreated gets a reference to the given bool and assigns it to the ContactCreated field.
func (o *RestEWebhook) SetContactCreated(v bool) {
	o.ContactCreated = &v
}

func (o RestEWebhook) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestEWebhook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.Unsubscribed) {
		toSerialize["unsubscribed"] = o.Unsubscribed
	}
	if !IsNil(o.Dropped) {
		toSerialize["dropped"] = o.Dropped
	}
	if !IsNil(o.Bounced) {
		toSerialize["bounced"] = o.Bounced
	}
	if !IsNil(o.MarkedSpam) {
		toSerialize["markedSpam"] = o.MarkedSpam
	}
	if !IsNil(o.Clicked) {
		toSerialize["clicked"] = o.Clicked
	}
	if !IsNil(o.Opened) {
		toSerialize["opened"] = o.Opened
	}
	if !IsNil(o.ContactCreated) {
		toSerialize["contactCreated"] = o.ContactCreated
	}
	return toSerialize, nil
}

func (o *RestEWebhook) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestEWebhook := _RestEWebhook{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestEWebhook)

	if err != nil {
		return err
	}

	*o = RestEWebhook(varRestEWebhook)

	return err
}

type NullableRestEWebhook struct {
	value *RestEWebhook
	isSet bool
}

func (v NullableRestEWebhook) Get() *RestEWebhook {
	return v.value
}

func (v *NullableRestEWebhook) Set(val *RestEWebhook) {
	v.value = val
	v.isSet = true
}

func (v NullableRestEWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableRestEWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestEWebhook(val *RestEWebhook) *NullableRestEWebhook {
	return &NullableRestEWebhook{value: val, isSet: true}
}

func (v NullableRestEWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestEWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


