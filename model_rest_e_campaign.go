/*
SendX REST API

# SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 

API version: 1.0.0
Contact: hello@sendx.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestECampaign type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestECampaign{}

// RestECampaign struct for RestECampaign
type RestECampaign struct {
	// Campaign name for internal organization
	Name string `json:"name"`
	// Email subject line with personalization support.  **Features:** - Supports template variables ({{contact.firstName}}) - Emoji support for better engagement - A/B testing variations supported 
	Subject string `json:"subject"`
	// Sender identifier.  **Note:** Sender must be verified before use 
	Sender string `json:"sender" validate:"regexp=^(sender_)?[a-zA-Z0-9]{22}$"`
	// HTML content of the email campaign
	HtmlCode string `json:"htmlCode"`
	// Preview text shown in email clients
	PreviewText *string `json:"previewText,omitempty"`
	// Plain text version for better deliverability
	PlainText *string `json:"plainText,omitempty"`
	// Campaign scheduling type.  **Values:** - `0` - Schedule for specific date/time - `1` - Send immediately 
	ScheduleType *int32 `json:"scheduleType,omitempty"`
	// datetime for scheduled campaigns (required if scheduleType=0)
	ScheduleCondition *string `json:"scheduleCondition,omitempty"`
	// Time condition for scheduled campaigns in HH:MM PM/AM format
	TimeCondition *string `json:"timeCondition,omitempty"`
	// Timezone for scheduled campaigns (IANA format)
	Timezone *string `json:"timezone,omitempty"`
	// Preferred timezone for smart send optimization (required for smartSend and sendInContactsTimezone)
	PreferredTimezone *string `json:"preferredTimezone,omitempty"`
	// Preferred time optimization setting (required for smartSend and sendInContactsTimezone)
	PreferredTimeCondition *string `json:"preferredTimeCondition,omitempty"`
	// Send at specified time in each contact's timezone
	SendInContactsTimezone *bool `json:"sendInContactsTimezone,omitempty"`
	// Enable AI-powered send time optimization
	SmartSend *bool `json:"smartSend,omitempty"`
	// Segment IDs to include
	IncludedSegments []string `json:"includedSegments,omitempty"`
	// List IDs to include
	IncludedLists []string `json:"includedLists,omitempty"`
	// Tag IDs to include
	IncludedTags []string `json:"includedTags,omitempty"`
	// Segment IDs to exclude
	ExcludedSegments []string `json:"excludedSegments,omitempty"`
	// List IDs to exclude
	ExcludedLists []string `json:"excludedLists,omitempty"`
	// Tag IDs to exclude (prefix automatically stripped)
	ExcludedTags []string `json:"excludedTags,omitempty"`
}

type _RestECampaign RestECampaign

// NewRestECampaign instantiates a new RestECampaign object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestECampaign(name string, subject string, sender string, htmlCode string) *RestECampaign {
	this := RestECampaign{}
	this.Name = name
	this.Subject = subject
	this.Sender = sender
	this.HtmlCode = htmlCode
	return &this
}

// NewRestECampaignWithDefaults instantiates a new RestECampaign object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestECampaignWithDefaults() *RestECampaign {
	this := RestECampaign{}
	return &this
}

// GetName returns the Name field value
func (o *RestECampaign) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RestECampaign) SetName(v string) {
	o.Name = v
}

// GetSubject returns the Subject field value
func (o *RestECampaign) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *RestECampaign) SetSubject(v string) {
	o.Subject = v
}

// GetSender returns the Sender field value
func (o *RestECampaign) GetSender() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sender
}

// GetSenderOk returns a tuple with the Sender field value
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetSenderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sender, true
}

// SetSender sets field value
func (o *RestECampaign) SetSender(v string) {
	o.Sender = v
}

// GetHtmlCode returns the HtmlCode field value
func (o *RestECampaign) GetHtmlCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HtmlCode
}

// GetHtmlCodeOk returns a tuple with the HtmlCode field value
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetHtmlCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HtmlCode, true
}

// SetHtmlCode sets field value
func (o *RestECampaign) SetHtmlCode(v string) {
	o.HtmlCode = v
}

// GetPreviewText returns the PreviewText field value if set, zero value otherwise.
func (o *RestECampaign) GetPreviewText() string {
	if o == nil || IsNil(o.PreviewText) {
		var ret string
		return ret
	}
	return *o.PreviewText
}

// GetPreviewTextOk returns a tuple with the PreviewText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetPreviewTextOk() (*string, bool) {
	if o == nil || IsNil(o.PreviewText) {
		return nil, false
	}
	return o.PreviewText, true
}

// HasPreviewText returns a boolean if a field has been set.
func (o *RestECampaign) HasPreviewText() bool {
	if o != nil && !IsNil(o.PreviewText) {
		return true
	}

	return false
}

// SetPreviewText gets a reference to the given string and assigns it to the PreviewText field.
func (o *RestECampaign) SetPreviewText(v string) {
	o.PreviewText = &v
}

// GetPlainText returns the PlainText field value if set, zero value otherwise.
func (o *RestECampaign) GetPlainText() string {
	if o == nil || IsNil(o.PlainText) {
		var ret string
		return ret
	}
	return *o.PlainText
}

// GetPlainTextOk returns a tuple with the PlainText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetPlainTextOk() (*string, bool) {
	if o == nil || IsNil(o.PlainText) {
		return nil, false
	}
	return o.PlainText, true
}

// HasPlainText returns a boolean if a field has been set.
func (o *RestECampaign) HasPlainText() bool {
	if o != nil && !IsNil(o.PlainText) {
		return true
	}

	return false
}

// SetPlainText gets a reference to the given string and assigns it to the PlainText field.
func (o *RestECampaign) SetPlainText(v string) {
	o.PlainText = &v
}

// GetScheduleType returns the ScheduleType field value if set, zero value otherwise.
func (o *RestECampaign) GetScheduleType() int32 {
	if o == nil || IsNil(o.ScheduleType) {
		var ret int32
		return ret
	}
	return *o.ScheduleType
}

// GetScheduleTypeOk returns a tuple with the ScheduleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetScheduleTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.ScheduleType) {
		return nil, false
	}
	return o.ScheduleType, true
}

// HasScheduleType returns a boolean if a field has been set.
func (o *RestECampaign) HasScheduleType() bool {
	if o != nil && !IsNil(o.ScheduleType) {
		return true
	}

	return false
}

// SetScheduleType gets a reference to the given int32 and assigns it to the ScheduleType field.
func (o *RestECampaign) SetScheduleType(v int32) {
	o.ScheduleType = &v
}

// GetScheduleCondition returns the ScheduleCondition field value if set, zero value otherwise.
func (o *RestECampaign) GetScheduleCondition() string {
	if o == nil || IsNil(o.ScheduleCondition) {
		var ret string
		return ret
	}
	return *o.ScheduleCondition
}

// GetScheduleConditionOk returns a tuple with the ScheduleCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetScheduleConditionOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduleCondition) {
		return nil, false
	}
	return o.ScheduleCondition, true
}

// HasScheduleCondition returns a boolean if a field has been set.
func (o *RestECampaign) HasScheduleCondition() bool {
	if o != nil && !IsNil(o.ScheduleCondition) {
		return true
	}

	return false
}

// SetScheduleCondition gets a reference to the given string and assigns it to the ScheduleCondition field.
func (o *RestECampaign) SetScheduleCondition(v string) {
	o.ScheduleCondition = &v
}

// GetTimeCondition returns the TimeCondition field value if set, zero value otherwise.
func (o *RestECampaign) GetTimeCondition() string {
	if o == nil || IsNil(o.TimeCondition) {
		var ret string
		return ret
	}
	return *o.TimeCondition
}

// GetTimeConditionOk returns a tuple with the TimeCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetTimeConditionOk() (*string, bool) {
	if o == nil || IsNil(o.TimeCondition) {
		return nil, false
	}
	return o.TimeCondition, true
}

// HasTimeCondition returns a boolean if a field has been set.
func (o *RestECampaign) HasTimeCondition() bool {
	if o != nil && !IsNil(o.TimeCondition) {
		return true
	}

	return false
}

// SetTimeCondition gets a reference to the given string and assigns it to the TimeCondition field.
func (o *RestECampaign) SetTimeCondition(v string) {
	o.TimeCondition = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *RestECampaign) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *RestECampaign) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *RestECampaign) SetTimezone(v string) {
	o.Timezone = &v
}

// GetPreferredTimezone returns the PreferredTimezone field value if set, zero value otherwise.
func (o *RestECampaign) GetPreferredTimezone() string {
	if o == nil || IsNil(o.PreferredTimezone) {
		var ret string
		return ret
	}
	return *o.PreferredTimezone
}

// GetPreferredTimezoneOk returns a tuple with the PreferredTimezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetPreferredTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredTimezone) {
		return nil, false
	}
	return o.PreferredTimezone, true
}

// HasPreferredTimezone returns a boolean if a field has been set.
func (o *RestECampaign) HasPreferredTimezone() bool {
	if o != nil && !IsNil(o.PreferredTimezone) {
		return true
	}

	return false
}

// SetPreferredTimezone gets a reference to the given string and assigns it to the PreferredTimezone field.
func (o *RestECampaign) SetPreferredTimezone(v string) {
	o.PreferredTimezone = &v
}

// GetPreferredTimeCondition returns the PreferredTimeCondition field value if set, zero value otherwise.
func (o *RestECampaign) GetPreferredTimeCondition() string {
	if o == nil || IsNil(o.PreferredTimeCondition) {
		var ret string
		return ret
	}
	return *o.PreferredTimeCondition
}

// GetPreferredTimeConditionOk returns a tuple with the PreferredTimeCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetPreferredTimeConditionOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredTimeCondition) {
		return nil, false
	}
	return o.PreferredTimeCondition, true
}

// HasPreferredTimeCondition returns a boolean if a field has been set.
func (o *RestECampaign) HasPreferredTimeCondition() bool {
	if o != nil && !IsNil(o.PreferredTimeCondition) {
		return true
	}

	return false
}

// SetPreferredTimeCondition gets a reference to the given string and assigns it to the PreferredTimeCondition field.
func (o *RestECampaign) SetPreferredTimeCondition(v string) {
	o.PreferredTimeCondition = &v
}

// GetSendInContactsTimezone returns the SendInContactsTimezone field value if set, zero value otherwise.
func (o *RestECampaign) GetSendInContactsTimezone() bool {
	if o == nil || IsNil(o.SendInContactsTimezone) {
		var ret bool
		return ret
	}
	return *o.SendInContactsTimezone
}

// GetSendInContactsTimezoneOk returns a tuple with the SendInContactsTimezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetSendInContactsTimezoneOk() (*bool, bool) {
	if o == nil || IsNil(o.SendInContactsTimezone) {
		return nil, false
	}
	return o.SendInContactsTimezone, true
}

// HasSendInContactsTimezone returns a boolean if a field has been set.
func (o *RestECampaign) HasSendInContactsTimezone() bool {
	if o != nil && !IsNil(o.SendInContactsTimezone) {
		return true
	}

	return false
}

// SetSendInContactsTimezone gets a reference to the given bool and assigns it to the SendInContactsTimezone field.
func (o *RestECampaign) SetSendInContactsTimezone(v bool) {
	o.SendInContactsTimezone = &v
}

// GetSmartSend returns the SmartSend field value if set, zero value otherwise.
func (o *RestECampaign) GetSmartSend() bool {
	if o == nil || IsNil(o.SmartSend) {
		var ret bool
		return ret
	}
	return *o.SmartSend
}

// GetSmartSendOk returns a tuple with the SmartSend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetSmartSendOk() (*bool, bool) {
	if o == nil || IsNil(o.SmartSend) {
		return nil, false
	}
	return o.SmartSend, true
}

// HasSmartSend returns a boolean if a field has been set.
func (o *RestECampaign) HasSmartSend() bool {
	if o != nil && !IsNil(o.SmartSend) {
		return true
	}

	return false
}

// SetSmartSend gets a reference to the given bool and assigns it to the SmartSend field.
func (o *RestECampaign) SetSmartSend(v bool) {
	o.SmartSend = &v
}

// GetIncludedSegments returns the IncludedSegments field value if set, zero value otherwise.
func (o *RestECampaign) GetIncludedSegments() []string {
	if o == nil || IsNil(o.IncludedSegments) {
		var ret []string
		return ret
	}
	return o.IncludedSegments
}

// GetIncludedSegmentsOk returns a tuple with the IncludedSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetIncludedSegmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedSegments) {
		return nil, false
	}
	return o.IncludedSegments, true
}

// HasIncludedSegments returns a boolean if a field has been set.
func (o *RestECampaign) HasIncludedSegments() bool {
	if o != nil && !IsNil(o.IncludedSegments) {
		return true
	}

	return false
}

// SetIncludedSegments gets a reference to the given []string and assigns it to the IncludedSegments field.
func (o *RestECampaign) SetIncludedSegments(v []string) {
	o.IncludedSegments = v
}

// GetIncludedLists returns the IncludedLists field value if set, zero value otherwise.
func (o *RestECampaign) GetIncludedLists() []string {
	if o == nil || IsNil(o.IncludedLists) {
		var ret []string
		return ret
	}
	return o.IncludedLists
}

// GetIncludedListsOk returns a tuple with the IncludedLists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetIncludedListsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedLists) {
		return nil, false
	}
	return o.IncludedLists, true
}

// HasIncludedLists returns a boolean if a field has been set.
func (o *RestECampaign) HasIncludedLists() bool {
	if o != nil && !IsNil(o.IncludedLists) {
		return true
	}

	return false
}

// SetIncludedLists gets a reference to the given []string and assigns it to the IncludedLists field.
func (o *RestECampaign) SetIncludedLists(v []string) {
	o.IncludedLists = v
}

// GetIncludedTags returns the IncludedTags field value if set, zero value otherwise.
func (o *RestECampaign) GetIncludedTags() []string {
	if o == nil || IsNil(o.IncludedTags) {
		var ret []string
		return ret
	}
	return o.IncludedTags
}

// GetIncludedTagsOk returns a tuple with the IncludedTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetIncludedTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedTags) {
		return nil, false
	}
	return o.IncludedTags, true
}

// HasIncludedTags returns a boolean if a field has been set.
func (o *RestECampaign) HasIncludedTags() bool {
	if o != nil && !IsNil(o.IncludedTags) {
		return true
	}

	return false
}

// SetIncludedTags gets a reference to the given []string and assigns it to the IncludedTags field.
func (o *RestECampaign) SetIncludedTags(v []string) {
	o.IncludedTags = v
}

// GetExcludedSegments returns the ExcludedSegments field value if set, zero value otherwise.
func (o *RestECampaign) GetExcludedSegments() []string {
	if o == nil || IsNil(o.ExcludedSegments) {
		var ret []string
		return ret
	}
	return o.ExcludedSegments
}

// GetExcludedSegmentsOk returns a tuple with the ExcludedSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetExcludedSegmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedSegments) {
		return nil, false
	}
	return o.ExcludedSegments, true
}

// HasExcludedSegments returns a boolean if a field has been set.
func (o *RestECampaign) HasExcludedSegments() bool {
	if o != nil && !IsNil(o.ExcludedSegments) {
		return true
	}

	return false
}

// SetExcludedSegments gets a reference to the given []string and assigns it to the ExcludedSegments field.
func (o *RestECampaign) SetExcludedSegments(v []string) {
	o.ExcludedSegments = v
}

// GetExcludedLists returns the ExcludedLists field value if set, zero value otherwise.
func (o *RestECampaign) GetExcludedLists() []string {
	if o == nil || IsNil(o.ExcludedLists) {
		var ret []string
		return ret
	}
	return o.ExcludedLists
}

// GetExcludedListsOk returns a tuple with the ExcludedLists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetExcludedListsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedLists) {
		return nil, false
	}
	return o.ExcludedLists, true
}

// HasExcludedLists returns a boolean if a field has been set.
func (o *RestECampaign) HasExcludedLists() bool {
	if o != nil && !IsNil(o.ExcludedLists) {
		return true
	}

	return false
}

// SetExcludedLists gets a reference to the given []string and assigns it to the ExcludedLists field.
func (o *RestECampaign) SetExcludedLists(v []string) {
	o.ExcludedLists = v
}

// GetExcludedTags returns the ExcludedTags field value if set, zero value otherwise.
func (o *RestECampaign) GetExcludedTags() []string {
	if o == nil || IsNil(o.ExcludedTags) {
		var ret []string
		return ret
	}
	return o.ExcludedTags
}

// GetExcludedTagsOk returns a tuple with the ExcludedTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestECampaign) GetExcludedTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedTags) {
		return nil, false
	}
	return o.ExcludedTags, true
}

// HasExcludedTags returns a boolean if a field has been set.
func (o *RestECampaign) HasExcludedTags() bool {
	if o != nil && !IsNil(o.ExcludedTags) {
		return true
	}

	return false
}

// SetExcludedTags gets a reference to the given []string and assigns it to the ExcludedTags field.
func (o *RestECampaign) SetExcludedTags(v []string) {
	o.ExcludedTags = v
}

func (o RestECampaign) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestECampaign) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["subject"] = o.Subject
	toSerialize["sender"] = o.Sender
	toSerialize["htmlCode"] = o.HtmlCode
	if !IsNil(o.PreviewText) {
		toSerialize["previewText"] = o.PreviewText
	}
	if !IsNil(o.PlainText) {
		toSerialize["plainText"] = o.PlainText
	}
	if !IsNil(o.ScheduleType) {
		toSerialize["scheduleType"] = o.ScheduleType
	}
	if !IsNil(o.ScheduleCondition) {
		toSerialize["scheduleCondition"] = o.ScheduleCondition
	}
	if !IsNil(o.TimeCondition) {
		toSerialize["timeCondition"] = o.TimeCondition
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.PreferredTimezone) {
		toSerialize["preferredTimezone"] = o.PreferredTimezone
	}
	if !IsNil(o.PreferredTimeCondition) {
		toSerialize["preferredTimeCondition"] = o.PreferredTimeCondition
	}
	if !IsNil(o.SendInContactsTimezone) {
		toSerialize["sendInContactsTimezone"] = o.SendInContactsTimezone
	}
	if !IsNil(o.SmartSend) {
		toSerialize["smartSend"] = o.SmartSend
	}
	if !IsNil(o.IncludedSegments) {
		toSerialize["includedSegments"] = o.IncludedSegments
	}
	if !IsNil(o.IncludedLists) {
		toSerialize["includedLists"] = o.IncludedLists
	}
	if !IsNil(o.IncludedTags) {
		toSerialize["includedTags"] = o.IncludedTags
	}
	if !IsNil(o.ExcludedSegments) {
		toSerialize["excludedSegments"] = o.ExcludedSegments
	}
	if !IsNil(o.ExcludedLists) {
		toSerialize["excludedLists"] = o.ExcludedLists
	}
	if !IsNil(o.ExcludedTags) {
		toSerialize["excludedTags"] = o.ExcludedTags
	}
	return toSerialize, nil
}

func (o *RestECampaign) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"subject",
		"sender",
		"htmlCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestECampaign := _RestECampaign{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestECampaign)

	if err != nil {
		return err
	}

	*o = RestECampaign(varRestECampaign)

	return err
}

type NullableRestECampaign struct {
	value *RestECampaign
	isSet bool
}

func (v NullableRestECampaign) Get() *RestECampaign {
	return v.value
}

func (v *NullableRestECampaign) Set(val *RestECampaign) {
	v.value = val
	v.isSet = true
}

func (v NullableRestECampaign) IsSet() bool {
	return v.isSet
}

func (v *NullableRestECampaign) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestECampaign(val *RestECampaign) *NullableRestECampaign {
	return &NullableRestECampaign{value: val, isSet: true}
}

func (v NullableRestECampaign) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestECampaign) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


