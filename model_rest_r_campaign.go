/*
SendX REST API

# SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 

API version: 1.0.0
Contact: hello@sendx.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the RestRCampaign type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestRCampaign{}

// RestRCampaign struct for RestRCampaign
type RestRCampaign struct {
	// Encrypted ID of the campaign
	Id *string `json:"id,omitempty"`
	// Internal campaign name
	Name string `json:"name"`
	// Email subject line
	Subject string `json:"subject"`
	// Email preview text
	Preheader *string `json:"preheader,omitempty"`
	// Sender id
	Sender string `json:"sender"`
	// HTML email content
	HtmlContent *string `json:"htmlContent,omitempty"`
	// Plain text email content
	TextContent *string `json:"textContent,omitempty"`
	// Campaign scheduling type.  **Values:** - `0` - Schedule later - `1` - Send Now 
	ScheduleType int32 `json:"scheduleType"`
	// datetime for scheduled campaigns (required if scheduleType=1)
	ScheduleCondition string `json:"scheduleCondition"`
	// Campaign status.  **Values:** - `0` - Draft - `1` - Scheduled - `2` - Sending - `3` - Sent - `4` - Quarantined - `5` - Evaluating - `6` - Evaluation Failed - `7` - Warming Up 
	Status *int32 `json:"status,omitempty"`
	// Time-related condition for the campaign
	TimeCondition *string `json:"timeCondition,omitempty"`
	// Campaign timezone
	Timezone *string `json:"timezone,omitempty"`
	// Timezone for the scheduled send
	SmartSend *bool `json:"smartSend,omitempty"`
	// Send at specified time in each contact's timezone
	SendInContactsTimezone *bool `json:"sendInContactsTimezone,omitempty"`
	// Preferred time condition, in case of smartSend and sendInContactTimeZone
	PreferredTimeCondition *string `json:"preferredTimeCondition,omitempty"`
	// Preferred timezone for smart send optimization
	PreferredTimezone *string `json:"preferredTimezone,omitempty"`
	// Campaign delivery strategy
	Strategy *string `json:"strategy,omitempty"`
	// Included segment IDs
	IncludedSegments []string `json:"includedSegments,omitempty"`
	// Included list IDs with prefix
	IncludedLists []string `json:"includedLists"`
	// Included tag IDs with prefix
	IncludedTags []string `json:"includedTags,omitempty"`
	// Excluded segment IDs
	ExcludedSegments []string `json:"excludedSegments,omitempty"`
	// Excluded list IDs with prefix
	ExcludedLists []string `json:"excludedLists"`
	// Excluded tag IDs with prefix
	ExcludedTags []string `json:"excludedTags,omitempty"`
	// Whether the campaign is archived
	IsArchived *bool `json:"isArchived,omitempty"`
	// URL to the campaign screenshot
	CampaignScreenshotUrl *string `json:"campaignScreenshotUrl,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
}

type _RestRCampaign RestRCampaign

// NewRestRCampaign instantiates a new RestRCampaign object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestRCampaign(name string, subject string, sender string, scheduleType int32, scheduleCondition string, includedLists []string, excludedLists []string) *RestRCampaign {
	this := RestRCampaign{}
	this.Name = name
	this.Subject = subject
	this.Sender = sender
	this.ScheduleType = scheduleType
	this.ScheduleCondition = scheduleCondition
	this.IncludedLists = includedLists
	this.ExcludedLists = excludedLists
	return &this
}

// NewRestRCampaignWithDefaults instantiates a new RestRCampaign object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestRCampaignWithDefaults() *RestRCampaign {
	this := RestRCampaign{}
	var scheduleType int32 = 0
	this.ScheduleType = scheduleType
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RestRCampaign) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RestRCampaign) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RestRCampaign) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *RestRCampaign) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RestRCampaign) SetName(v string) {
	o.Name = v
}

// GetSubject returns the Subject field value
func (o *RestRCampaign) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *RestRCampaign) SetSubject(v string) {
	o.Subject = v
}

// GetPreheader returns the Preheader field value if set, zero value otherwise.
func (o *RestRCampaign) GetPreheader() string {
	if o == nil || IsNil(o.Preheader) {
		var ret string
		return ret
	}
	return *o.Preheader
}

// GetPreheaderOk returns a tuple with the Preheader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetPreheaderOk() (*string, bool) {
	if o == nil || IsNil(o.Preheader) {
		return nil, false
	}
	return o.Preheader, true
}

// HasPreheader returns a boolean if a field has been set.
func (o *RestRCampaign) HasPreheader() bool {
	if o != nil && !IsNil(o.Preheader) {
		return true
	}

	return false
}

// SetPreheader gets a reference to the given string and assigns it to the Preheader field.
func (o *RestRCampaign) SetPreheader(v string) {
	o.Preheader = &v
}

// GetSender returns the Sender field value
func (o *RestRCampaign) GetSender() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sender
}

// GetSenderOk returns a tuple with the Sender field value
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetSenderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sender, true
}

// SetSender sets field value
func (o *RestRCampaign) SetSender(v string) {
	o.Sender = v
}

// GetHtmlContent returns the HtmlContent field value if set, zero value otherwise.
func (o *RestRCampaign) GetHtmlContent() string {
	if o == nil || IsNil(o.HtmlContent) {
		var ret string
		return ret
	}
	return *o.HtmlContent
}

// GetHtmlContentOk returns a tuple with the HtmlContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetHtmlContentOk() (*string, bool) {
	if o == nil || IsNil(o.HtmlContent) {
		return nil, false
	}
	return o.HtmlContent, true
}

// HasHtmlContent returns a boolean if a field has been set.
func (o *RestRCampaign) HasHtmlContent() bool {
	if o != nil && !IsNil(o.HtmlContent) {
		return true
	}

	return false
}

// SetHtmlContent gets a reference to the given string and assigns it to the HtmlContent field.
func (o *RestRCampaign) SetHtmlContent(v string) {
	o.HtmlContent = &v
}

// GetTextContent returns the TextContent field value if set, zero value otherwise.
func (o *RestRCampaign) GetTextContent() string {
	if o == nil || IsNil(o.TextContent) {
		var ret string
		return ret
	}
	return *o.TextContent
}

// GetTextContentOk returns a tuple with the TextContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetTextContentOk() (*string, bool) {
	if o == nil || IsNil(o.TextContent) {
		return nil, false
	}
	return o.TextContent, true
}

// HasTextContent returns a boolean if a field has been set.
func (o *RestRCampaign) HasTextContent() bool {
	if o != nil && !IsNil(o.TextContent) {
		return true
	}

	return false
}

// SetTextContent gets a reference to the given string and assigns it to the TextContent field.
func (o *RestRCampaign) SetTextContent(v string) {
	o.TextContent = &v
}

// GetScheduleType returns the ScheduleType field value
func (o *RestRCampaign) GetScheduleType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ScheduleType
}

// GetScheduleTypeOk returns a tuple with the ScheduleType field value
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetScheduleTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScheduleType, true
}

// SetScheduleType sets field value
func (o *RestRCampaign) SetScheduleType(v int32) {
	o.ScheduleType = v
}

// GetScheduleCondition returns the ScheduleCondition field value
func (o *RestRCampaign) GetScheduleCondition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScheduleCondition
}

// GetScheduleConditionOk returns a tuple with the ScheduleCondition field value
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetScheduleConditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScheduleCondition, true
}

// SetScheduleCondition sets field value
func (o *RestRCampaign) SetScheduleCondition(v string) {
	o.ScheduleCondition = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RestRCampaign) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RestRCampaign) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *RestRCampaign) SetStatus(v int32) {
	o.Status = &v
}

// GetTimeCondition returns the TimeCondition field value if set, zero value otherwise.
func (o *RestRCampaign) GetTimeCondition() string {
	if o == nil || IsNil(o.TimeCondition) {
		var ret string
		return ret
	}
	return *o.TimeCondition
}

// GetTimeConditionOk returns a tuple with the TimeCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetTimeConditionOk() (*string, bool) {
	if o == nil || IsNil(o.TimeCondition) {
		return nil, false
	}
	return o.TimeCondition, true
}

// HasTimeCondition returns a boolean if a field has been set.
func (o *RestRCampaign) HasTimeCondition() bool {
	if o != nil && !IsNil(o.TimeCondition) {
		return true
	}

	return false
}

// SetTimeCondition gets a reference to the given string and assigns it to the TimeCondition field.
func (o *RestRCampaign) SetTimeCondition(v string) {
	o.TimeCondition = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *RestRCampaign) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *RestRCampaign) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *RestRCampaign) SetTimezone(v string) {
	o.Timezone = &v
}

// GetSmartSend returns the SmartSend field value if set, zero value otherwise.
func (o *RestRCampaign) GetSmartSend() bool {
	if o == nil || IsNil(o.SmartSend) {
		var ret bool
		return ret
	}
	return *o.SmartSend
}

// GetSmartSendOk returns a tuple with the SmartSend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetSmartSendOk() (*bool, bool) {
	if o == nil || IsNil(o.SmartSend) {
		return nil, false
	}
	return o.SmartSend, true
}

// HasSmartSend returns a boolean if a field has been set.
func (o *RestRCampaign) HasSmartSend() bool {
	if o != nil && !IsNil(o.SmartSend) {
		return true
	}

	return false
}

// SetSmartSend gets a reference to the given bool and assigns it to the SmartSend field.
func (o *RestRCampaign) SetSmartSend(v bool) {
	o.SmartSend = &v
}

// GetSendInContactsTimezone returns the SendInContactsTimezone field value if set, zero value otherwise.
func (o *RestRCampaign) GetSendInContactsTimezone() bool {
	if o == nil || IsNil(o.SendInContactsTimezone) {
		var ret bool
		return ret
	}
	return *o.SendInContactsTimezone
}

// GetSendInContactsTimezoneOk returns a tuple with the SendInContactsTimezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetSendInContactsTimezoneOk() (*bool, bool) {
	if o == nil || IsNil(o.SendInContactsTimezone) {
		return nil, false
	}
	return o.SendInContactsTimezone, true
}

// HasSendInContactsTimezone returns a boolean if a field has been set.
func (o *RestRCampaign) HasSendInContactsTimezone() bool {
	if o != nil && !IsNil(o.SendInContactsTimezone) {
		return true
	}

	return false
}

// SetSendInContactsTimezone gets a reference to the given bool and assigns it to the SendInContactsTimezone field.
func (o *RestRCampaign) SetSendInContactsTimezone(v bool) {
	o.SendInContactsTimezone = &v
}

// GetPreferredTimeCondition returns the PreferredTimeCondition field value if set, zero value otherwise.
func (o *RestRCampaign) GetPreferredTimeCondition() string {
	if o == nil || IsNil(o.PreferredTimeCondition) {
		var ret string
		return ret
	}
	return *o.PreferredTimeCondition
}

// GetPreferredTimeConditionOk returns a tuple with the PreferredTimeCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetPreferredTimeConditionOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredTimeCondition) {
		return nil, false
	}
	return o.PreferredTimeCondition, true
}

// HasPreferredTimeCondition returns a boolean if a field has been set.
func (o *RestRCampaign) HasPreferredTimeCondition() bool {
	if o != nil && !IsNil(o.PreferredTimeCondition) {
		return true
	}

	return false
}

// SetPreferredTimeCondition gets a reference to the given string and assigns it to the PreferredTimeCondition field.
func (o *RestRCampaign) SetPreferredTimeCondition(v string) {
	o.PreferredTimeCondition = &v
}

// GetPreferredTimezone returns the PreferredTimezone field value if set, zero value otherwise.
func (o *RestRCampaign) GetPreferredTimezone() string {
	if o == nil || IsNil(o.PreferredTimezone) {
		var ret string
		return ret
	}
	return *o.PreferredTimezone
}

// GetPreferredTimezoneOk returns a tuple with the PreferredTimezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetPreferredTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredTimezone) {
		return nil, false
	}
	return o.PreferredTimezone, true
}

// HasPreferredTimezone returns a boolean if a field has been set.
func (o *RestRCampaign) HasPreferredTimezone() bool {
	if o != nil && !IsNil(o.PreferredTimezone) {
		return true
	}

	return false
}

// SetPreferredTimezone gets a reference to the given string and assigns it to the PreferredTimezone field.
func (o *RestRCampaign) SetPreferredTimezone(v string) {
	o.PreferredTimezone = &v
}

// GetStrategy returns the Strategy field value if set, zero value otherwise.
func (o *RestRCampaign) GetStrategy() string {
	if o == nil || IsNil(o.Strategy) {
		var ret string
		return ret
	}
	return *o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.Strategy) {
		return nil, false
	}
	return o.Strategy, true
}

// HasStrategy returns a boolean if a field has been set.
func (o *RestRCampaign) HasStrategy() bool {
	if o != nil && !IsNil(o.Strategy) {
		return true
	}

	return false
}

// SetStrategy gets a reference to the given string and assigns it to the Strategy field.
func (o *RestRCampaign) SetStrategy(v string) {
	o.Strategy = &v
}

// GetIncludedSegments returns the IncludedSegments field value if set, zero value otherwise.
func (o *RestRCampaign) GetIncludedSegments() []string {
	if o == nil || IsNil(o.IncludedSegments) {
		var ret []string
		return ret
	}
	return o.IncludedSegments
}

// GetIncludedSegmentsOk returns a tuple with the IncludedSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetIncludedSegmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedSegments) {
		return nil, false
	}
	return o.IncludedSegments, true
}

// HasIncludedSegments returns a boolean if a field has been set.
func (o *RestRCampaign) HasIncludedSegments() bool {
	if o != nil && !IsNil(o.IncludedSegments) {
		return true
	}

	return false
}

// SetIncludedSegments gets a reference to the given []string and assigns it to the IncludedSegments field.
func (o *RestRCampaign) SetIncludedSegments(v []string) {
	o.IncludedSegments = v
}

// GetIncludedLists returns the IncludedLists field value
func (o *RestRCampaign) GetIncludedLists() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IncludedLists
}

// GetIncludedListsOk returns a tuple with the IncludedLists field value
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetIncludedListsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludedLists, true
}

// SetIncludedLists sets field value
func (o *RestRCampaign) SetIncludedLists(v []string) {
	o.IncludedLists = v
}

// GetIncludedTags returns the IncludedTags field value if set, zero value otherwise.
func (o *RestRCampaign) GetIncludedTags() []string {
	if o == nil || IsNil(o.IncludedTags) {
		var ret []string
		return ret
	}
	return o.IncludedTags
}

// GetIncludedTagsOk returns a tuple with the IncludedTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetIncludedTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedTags) {
		return nil, false
	}
	return o.IncludedTags, true
}

// HasIncludedTags returns a boolean if a field has been set.
func (o *RestRCampaign) HasIncludedTags() bool {
	if o != nil && !IsNil(o.IncludedTags) {
		return true
	}

	return false
}

// SetIncludedTags gets a reference to the given []string and assigns it to the IncludedTags field.
func (o *RestRCampaign) SetIncludedTags(v []string) {
	o.IncludedTags = v
}

// GetExcludedSegments returns the ExcludedSegments field value if set, zero value otherwise.
func (o *RestRCampaign) GetExcludedSegments() []string {
	if o == nil || IsNil(o.ExcludedSegments) {
		var ret []string
		return ret
	}
	return o.ExcludedSegments
}

// GetExcludedSegmentsOk returns a tuple with the ExcludedSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetExcludedSegmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedSegments) {
		return nil, false
	}
	return o.ExcludedSegments, true
}

// HasExcludedSegments returns a boolean if a field has been set.
func (o *RestRCampaign) HasExcludedSegments() bool {
	if o != nil && !IsNil(o.ExcludedSegments) {
		return true
	}

	return false
}

// SetExcludedSegments gets a reference to the given []string and assigns it to the ExcludedSegments field.
func (o *RestRCampaign) SetExcludedSegments(v []string) {
	o.ExcludedSegments = v
}

// GetExcludedLists returns the ExcludedLists field value
func (o *RestRCampaign) GetExcludedLists() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExcludedLists
}

// GetExcludedListsOk returns a tuple with the ExcludedLists field value
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetExcludedListsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExcludedLists, true
}

// SetExcludedLists sets field value
func (o *RestRCampaign) SetExcludedLists(v []string) {
	o.ExcludedLists = v
}

// GetExcludedTags returns the ExcludedTags field value if set, zero value otherwise.
func (o *RestRCampaign) GetExcludedTags() []string {
	if o == nil || IsNil(o.ExcludedTags) {
		var ret []string
		return ret
	}
	return o.ExcludedTags
}

// GetExcludedTagsOk returns a tuple with the ExcludedTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetExcludedTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedTags) {
		return nil, false
	}
	return o.ExcludedTags, true
}

// HasExcludedTags returns a boolean if a field has been set.
func (o *RestRCampaign) HasExcludedTags() bool {
	if o != nil && !IsNil(o.ExcludedTags) {
		return true
	}

	return false
}

// SetExcludedTags gets a reference to the given []string and assigns it to the ExcludedTags field.
func (o *RestRCampaign) SetExcludedTags(v []string) {
	o.ExcludedTags = v
}

// GetIsArchived returns the IsArchived field value if set, zero value otherwise.
func (o *RestRCampaign) GetIsArchived() bool {
	if o == nil || IsNil(o.IsArchived) {
		var ret bool
		return ret
	}
	return *o.IsArchived
}

// GetIsArchivedOk returns a tuple with the IsArchived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetIsArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsArchived) {
		return nil, false
	}
	return o.IsArchived, true
}

// HasIsArchived returns a boolean if a field has been set.
func (o *RestRCampaign) HasIsArchived() bool {
	if o != nil && !IsNil(o.IsArchived) {
		return true
	}

	return false
}

// SetIsArchived gets a reference to the given bool and assigns it to the IsArchived field.
func (o *RestRCampaign) SetIsArchived(v bool) {
	o.IsArchived = &v
}

// GetCampaignScreenshotUrl returns the CampaignScreenshotUrl field value if set, zero value otherwise.
func (o *RestRCampaign) GetCampaignScreenshotUrl() string {
	if o == nil || IsNil(o.CampaignScreenshotUrl) {
		var ret string
		return ret
	}
	return *o.CampaignScreenshotUrl
}

// GetCampaignScreenshotUrlOk returns a tuple with the CampaignScreenshotUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetCampaignScreenshotUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CampaignScreenshotUrl) {
		return nil, false
	}
	return o.CampaignScreenshotUrl, true
}

// HasCampaignScreenshotUrl returns a boolean if a field has been set.
func (o *RestRCampaign) HasCampaignScreenshotUrl() bool {
	if o != nil && !IsNil(o.CampaignScreenshotUrl) {
		return true
	}

	return false
}

// SetCampaignScreenshotUrl gets a reference to the given string and assigns it to the CampaignScreenshotUrl field.
func (o *RestRCampaign) SetCampaignScreenshotUrl(v string) {
	o.CampaignScreenshotUrl = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *RestRCampaign) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *RestRCampaign) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *RestRCampaign) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *RestRCampaign) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRCampaign) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *RestRCampaign) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *RestRCampaign) SetUpdated(v time.Time) {
	o.Updated = &v
}

func (o RestRCampaign) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestRCampaign) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["subject"] = o.Subject
	if !IsNil(o.Preheader) {
		toSerialize["preheader"] = o.Preheader
	}
	toSerialize["sender"] = o.Sender
	if !IsNil(o.HtmlContent) {
		toSerialize["htmlContent"] = o.HtmlContent
	}
	if !IsNil(o.TextContent) {
		toSerialize["textContent"] = o.TextContent
	}
	toSerialize["scheduleType"] = o.ScheduleType
	toSerialize["scheduleCondition"] = o.ScheduleCondition
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TimeCondition) {
		toSerialize["timeCondition"] = o.TimeCondition
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.SmartSend) {
		toSerialize["smartSend"] = o.SmartSend
	}
	if !IsNil(o.SendInContactsTimezone) {
		toSerialize["sendInContactsTimezone"] = o.SendInContactsTimezone
	}
	if !IsNil(o.PreferredTimeCondition) {
		toSerialize["preferredTimeCondition"] = o.PreferredTimeCondition
	}
	if !IsNil(o.PreferredTimezone) {
		toSerialize["preferredTimezone"] = o.PreferredTimezone
	}
	if !IsNil(o.Strategy) {
		toSerialize["strategy"] = o.Strategy
	}
	if !IsNil(o.IncludedSegments) {
		toSerialize["includedSegments"] = o.IncludedSegments
	}
	toSerialize["includedLists"] = o.IncludedLists
	if !IsNil(o.IncludedTags) {
		toSerialize["includedTags"] = o.IncludedTags
	}
	if !IsNil(o.ExcludedSegments) {
		toSerialize["excludedSegments"] = o.ExcludedSegments
	}
	toSerialize["excludedLists"] = o.ExcludedLists
	if !IsNil(o.ExcludedTags) {
		toSerialize["excludedTags"] = o.ExcludedTags
	}
	if !IsNil(o.IsArchived) {
		toSerialize["isArchived"] = o.IsArchived
	}
	if !IsNil(o.CampaignScreenshotUrl) {
		toSerialize["campaignScreenshotUrl"] = o.CampaignScreenshotUrl
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

func (o *RestRCampaign) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"subject",
		"sender",
		"scheduleType",
		"scheduleCondition",
		"includedLists",
		"excludedLists",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestRCampaign := _RestRCampaign{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestRCampaign)

	if err != nil {
		return err
	}

	*o = RestRCampaign(varRestRCampaign)

	return err
}

type NullableRestRCampaign struct {
	value *RestRCampaign
	isSet bool
}

func (v NullableRestRCampaign) Get() *RestRCampaign {
	return v.value
}

func (v *NullableRestRCampaign) Set(val *RestRCampaign) {
	v.value = val
	v.isSet = true
}

func (v NullableRestRCampaign) IsSet() bool {
	return v.isSet
}

func (v *NullableRestRCampaign) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestRCampaign(val *RestRCampaign) *NullableRestRCampaign {
	return &NullableRestRCampaign{value: val, isSet: true}
}

func (v NullableRestRCampaign) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestRCampaign) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


