/*
SendX REST API

# SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 

API version: 1.0.0
Contact: hello@sendx.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendx

import (
	"encoding/json"
	"time"
)

// checks if the RestRTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestRTemplate{}

// RestRTemplate struct for RestRTemplate
type RestRTemplate struct {
	// Unique template identifier with template_ prefix
	Id *string `json:"id,omitempty" validate:"regexp=^template_[a-zA-Z0-9]{22}$"`
	// Name of the template
	Name *string `json:"name,omitempty"`
	// Email subject line (if applicable)
	Subject *string `json:"subject,omitempty"`
	// HTML content of the template
	HtmlCode *string `json:"htmlCode,omitempty"`
	// Template code for visual editors (JSON structure)
	TemplateCode *string `json:"templateCode,omitempty"`
	// Template type.  **Values:** - `0` - Email template - `1` - Other types 
	Type *int32 `json:"type,omitempty"`
	// URL to template thumbnail image
	Thumbnail *string `json:"thumbnail,omitempty"`
	// Editor type used to create the template.  **Values:** - `0` - PlainText - `1` - DragDrop - `2` - SendxEditor 
	EditorType *int32 `json:"editorType,omitempty"`
	// Template creation timestamp
	Created *time.Time `json:"created,omitempty"`
	// Template last update timestamp
	Updated *time.Time `json:"updated,omitempty"`
}

// NewRestRTemplate instantiates a new RestRTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestRTemplate() *RestRTemplate {
	this := RestRTemplate{}
	return &this
}

// NewRestRTemplateWithDefaults instantiates a new RestRTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestRTemplateWithDefaults() *RestRTemplate {
	this := RestRTemplate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RestRTemplate) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRTemplate) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RestRTemplate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RestRTemplate) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RestRTemplate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRTemplate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RestRTemplate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RestRTemplate) SetName(v string) {
	o.Name = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *RestRTemplate) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRTemplate) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *RestRTemplate) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *RestRTemplate) SetSubject(v string) {
	o.Subject = &v
}

// GetHtmlCode returns the HtmlCode field value if set, zero value otherwise.
func (o *RestRTemplate) GetHtmlCode() string {
	if o == nil || IsNil(o.HtmlCode) {
		var ret string
		return ret
	}
	return *o.HtmlCode
}

// GetHtmlCodeOk returns a tuple with the HtmlCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRTemplate) GetHtmlCodeOk() (*string, bool) {
	if o == nil || IsNil(o.HtmlCode) {
		return nil, false
	}
	return o.HtmlCode, true
}

// HasHtmlCode returns a boolean if a field has been set.
func (o *RestRTemplate) HasHtmlCode() bool {
	if o != nil && !IsNil(o.HtmlCode) {
		return true
	}

	return false
}

// SetHtmlCode gets a reference to the given string and assigns it to the HtmlCode field.
func (o *RestRTemplate) SetHtmlCode(v string) {
	o.HtmlCode = &v
}

// GetTemplateCode returns the TemplateCode field value if set, zero value otherwise.
func (o *RestRTemplate) GetTemplateCode() string {
	if o == nil || IsNil(o.TemplateCode) {
		var ret string
		return ret
	}
	return *o.TemplateCode
}

// GetTemplateCodeOk returns a tuple with the TemplateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRTemplate) GetTemplateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateCode) {
		return nil, false
	}
	return o.TemplateCode, true
}

// HasTemplateCode returns a boolean if a field has been set.
func (o *RestRTemplate) HasTemplateCode() bool {
	if o != nil && !IsNil(o.TemplateCode) {
		return true
	}

	return false
}

// SetTemplateCode gets a reference to the given string and assigns it to the TemplateCode field.
func (o *RestRTemplate) SetTemplateCode(v string) {
	o.TemplateCode = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RestRTemplate) GetType() int32 {
	if o == nil || IsNil(o.Type) {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRTemplate) GetTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RestRTemplate) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *RestRTemplate) SetType(v int32) {
	o.Type = &v
}

// GetThumbnail returns the Thumbnail field value if set, zero value otherwise.
func (o *RestRTemplate) GetThumbnail() string {
	if o == nil || IsNil(o.Thumbnail) {
		var ret string
		return ret
	}
	return *o.Thumbnail
}

// GetThumbnailOk returns a tuple with the Thumbnail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRTemplate) GetThumbnailOk() (*string, bool) {
	if o == nil || IsNil(o.Thumbnail) {
		return nil, false
	}
	return o.Thumbnail, true
}

// HasThumbnail returns a boolean if a field has been set.
func (o *RestRTemplate) HasThumbnail() bool {
	if o != nil && !IsNil(o.Thumbnail) {
		return true
	}

	return false
}

// SetThumbnail gets a reference to the given string and assigns it to the Thumbnail field.
func (o *RestRTemplate) SetThumbnail(v string) {
	o.Thumbnail = &v
}

// GetEditorType returns the EditorType field value if set, zero value otherwise.
func (o *RestRTemplate) GetEditorType() int32 {
	if o == nil || IsNil(o.EditorType) {
		var ret int32
		return ret
	}
	return *o.EditorType
}

// GetEditorTypeOk returns a tuple with the EditorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRTemplate) GetEditorTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.EditorType) {
		return nil, false
	}
	return o.EditorType, true
}

// HasEditorType returns a boolean if a field has been set.
func (o *RestRTemplate) HasEditorType() bool {
	if o != nil && !IsNil(o.EditorType) {
		return true
	}

	return false
}

// SetEditorType gets a reference to the given int32 and assigns it to the EditorType field.
func (o *RestRTemplate) SetEditorType(v int32) {
	o.EditorType = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *RestRTemplate) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRTemplate) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *RestRTemplate) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *RestRTemplate) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *RestRTemplate) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRTemplate) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *RestRTemplate) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *RestRTemplate) SetUpdated(v time.Time) {
	o.Updated = &v
}

func (o RestRTemplate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestRTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.HtmlCode) {
		toSerialize["htmlCode"] = o.HtmlCode
	}
	if !IsNil(o.TemplateCode) {
		toSerialize["templateCode"] = o.TemplateCode
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Thumbnail) {
		toSerialize["thumbnail"] = o.Thumbnail
	}
	if !IsNil(o.EditorType) {
		toSerialize["editorType"] = o.EditorType
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

type NullableRestRTemplate struct {
	value *RestRTemplate
	isSet bool
}

func (v NullableRestRTemplate) Get() *RestRTemplate {
	return v.value
}

func (v *NullableRestRTemplate) Set(val *RestRTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableRestRTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableRestRTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestRTemplate(val *RestRTemplate) *NullableRestRTemplate {
	return &NullableRestRTemplate{value: val, isSet: true}
}

func (v NullableRestRTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestRTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


