/*
SendX REST API

# SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 

API version: 1.0.0
Contact: hello@sendx.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendx

import (
	"encoding/json"
	"time"
)

// checks if the RestRContact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestRContact{}

// RestRContact struct for RestRContact
type RestRContact struct {
	// Unique contact identifier with contact_ prefix.  **Format:** `contact_` + 22 alphanumeric characters  **Usage:** - Use this ID for all subsequent API calls - Unique across the entire SendX platform - Never changes once created 
	Id *string `json:"id,omitempty" validate:"regexp=^contact_[a-zA-Z0-9]{22}$"`
	// First name of the contact
	FirstName *string `json:"firstName,omitempty"`
	// Last name of the contact
	LastName *string `json:"lastName,omitempty"`
	// Email address of the contact (unique within team)
	Email *string `json:"email,omitempty"`
	// Company name of the contact
	Company *string `json:"company,omitempty"`
	// Custom fields with field_ prefixed keys.  **Format:** All keys have `field_` prefix in responses  **Example Structure:** ```json {   \"field_MnuqBAG2NPLm7PZMWbjQxt\": \"Engineering\",   \"field_QqfhckbdcvQinLPlduIbHq\": \"Senior\",   \"field_MnuqBAG2NPLm7PZMWbjQxt\": \"$75000\" } ``` 
	CustomFields map[string]string `json:"customFields,omitempty"`
	// Associated lists with list_ prefixed identifiers.  **Format:** All IDs have `list_` prefix in responses 
	Lists []string `json:"lists,omitempty"`
	// Associated tags with tag_ prefixed identifiers.  **Format:** All IDs have `tag_` prefix in responses 
	Tags []string `json:"tags,omitempty"`
	// Whether the contact has unsubscribed from emails
	Unsubscribed *bool `json:"unsubscribed,omitempty"`
	// Whether emails to this contact have bounced
	Bounced *bool `json:"bounced,omitempty"`
	// Whether the contact has marked emails as spam
	Spam *bool `json:"spam,omitempty"`
	// Whether the contact is blocked from receiving emails
	Blocked *bool `json:"blocked,omitempty"`
	// Whether emails to this contact have been dropped
	Dropped *bool `json:"dropped,omitempty"`
	// Contact creation timestamp (ISO 8601 format)
	Created *time.Time `json:"created,omitempty"`
	// Contact last update timestamp (ISO 8601 format)
	Updated *time.Time `json:"updated,omitempty"`
	// Email tracking data and UTM parameters.  **Contains:** - UTM parameters from campaigns - Attribution data - Custom tracking parameters 
	TrackData *string `json:"trackData,omitempty"`
	// Source type of the contact creation.  **Values:** - `1` - API/Manual - `2` - Import - `3` - Form - `4` - Integration 
	ContactSource *int32 `json:"contactSource,omitempty"`
	// URL of the page where contact was created
	PageSource *string `json:"pageSource,omitempty"`
	// Last tracked IP address of the contact
	LastTrackedIp *string `json:"lastTrackedIp,omitempty"`
	// Lifetime Value of the contact in cents.  **Example:** 7500 = $75.00 
	LTV *int32 `json:"LTV,omitempty"`
}

// NewRestRContact instantiates a new RestRContact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestRContact() *RestRContact {
	this := RestRContact{}
	return &this
}

// NewRestRContactWithDefaults instantiates a new RestRContact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestRContactWithDefaults() *RestRContact {
	this := RestRContact{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RestRContact) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RestRContact) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RestRContact) SetId(v string) {
	o.Id = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *RestRContact) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *RestRContact) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *RestRContact) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *RestRContact) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *RestRContact) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *RestRContact) SetLastName(v string) {
	o.LastName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *RestRContact) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *RestRContact) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *RestRContact) SetEmail(v string) {
	o.Email = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *RestRContact) GetCompany() string {
	if o == nil || IsNil(o.Company) {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetCompanyOk() (*string, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *RestRContact) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *RestRContact) SetCompany(v string) {
	o.Company = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *RestRContact) GetCustomFields() map[string]string {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]string
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetCustomFieldsOk() (map[string]string, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]string{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *RestRContact) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]string and assigns it to the CustomFields field.
func (o *RestRContact) SetCustomFields(v map[string]string) {
	o.CustomFields = v
}

// GetLists returns the Lists field value if set, zero value otherwise.
func (o *RestRContact) GetLists() []string {
	if o == nil || IsNil(o.Lists) {
		var ret []string
		return ret
	}
	return o.Lists
}

// GetListsOk returns a tuple with the Lists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetListsOk() ([]string, bool) {
	if o == nil || IsNil(o.Lists) {
		return nil, false
	}
	return o.Lists, true
}

// HasLists returns a boolean if a field has been set.
func (o *RestRContact) HasLists() bool {
	if o != nil && !IsNil(o.Lists) {
		return true
	}

	return false
}

// SetLists gets a reference to the given []string and assigns it to the Lists field.
func (o *RestRContact) SetLists(v []string) {
	o.Lists = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *RestRContact) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *RestRContact) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *RestRContact) SetTags(v []string) {
	o.Tags = v
}

// GetUnsubscribed returns the Unsubscribed field value if set, zero value otherwise.
func (o *RestRContact) GetUnsubscribed() bool {
	if o == nil || IsNil(o.Unsubscribed) {
		var ret bool
		return ret
	}
	return *o.Unsubscribed
}

// GetUnsubscribedOk returns a tuple with the Unsubscribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetUnsubscribedOk() (*bool, bool) {
	if o == nil || IsNil(o.Unsubscribed) {
		return nil, false
	}
	return o.Unsubscribed, true
}

// HasUnsubscribed returns a boolean if a field has been set.
func (o *RestRContact) HasUnsubscribed() bool {
	if o != nil && !IsNil(o.Unsubscribed) {
		return true
	}

	return false
}

// SetUnsubscribed gets a reference to the given bool and assigns it to the Unsubscribed field.
func (o *RestRContact) SetUnsubscribed(v bool) {
	o.Unsubscribed = &v
}

// GetBounced returns the Bounced field value if set, zero value otherwise.
func (o *RestRContact) GetBounced() bool {
	if o == nil || IsNil(o.Bounced) {
		var ret bool
		return ret
	}
	return *o.Bounced
}

// GetBouncedOk returns a tuple with the Bounced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetBouncedOk() (*bool, bool) {
	if o == nil || IsNil(o.Bounced) {
		return nil, false
	}
	return o.Bounced, true
}

// HasBounced returns a boolean if a field has been set.
func (o *RestRContact) HasBounced() bool {
	if o != nil && !IsNil(o.Bounced) {
		return true
	}

	return false
}

// SetBounced gets a reference to the given bool and assigns it to the Bounced field.
func (o *RestRContact) SetBounced(v bool) {
	o.Bounced = &v
}

// GetSpam returns the Spam field value if set, zero value otherwise.
func (o *RestRContact) GetSpam() bool {
	if o == nil || IsNil(o.Spam) {
		var ret bool
		return ret
	}
	return *o.Spam
}

// GetSpamOk returns a tuple with the Spam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetSpamOk() (*bool, bool) {
	if o == nil || IsNil(o.Spam) {
		return nil, false
	}
	return o.Spam, true
}

// HasSpam returns a boolean if a field has been set.
func (o *RestRContact) HasSpam() bool {
	if o != nil && !IsNil(o.Spam) {
		return true
	}

	return false
}

// SetSpam gets a reference to the given bool and assigns it to the Spam field.
func (o *RestRContact) SetSpam(v bool) {
	o.Spam = &v
}

// GetBlocked returns the Blocked field value if set, zero value otherwise.
func (o *RestRContact) GetBlocked() bool {
	if o == nil || IsNil(o.Blocked) {
		var ret bool
		return ret
	}
	return *o.Blocked
}

// GetBlockedOk returns a tuple with the Blocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetBlockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Blocked) {
		return nil, false
	}
	return o.Blocked, true
}

// HasBlocked returns a boolean if a field has been set.
func (o *RestRContact) HasBlocked() bool {
	if o != nil && !IsNil(o.Blocked) {
		return true
	}

	return false
}

// SetBlocked gets a reference to the given bool and assigns it to the Blocked field.
func (o *RestRContact) SetBlocked(v bool) {
	o.Blocked = &v
}

// GetDropped returns the Dropped field value if set, zero value otherwise.
func (o *RestRContact) GetDropped() bool {
	if o == nil || IsNil(o.Dropped) {
		var ret bool
		return ret
	}
	return *o.Dropped
}

// GetDroppedOk returns a tuple with the Dropped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetDroppedOk() (*bool, bool) {
	if o == nil || IsNil(o.Dropped) {
		return nil, false
	}
	return o.Dropped, true
}

// HasDropped returns a boolean if a field has been set.
func (o *RestRContact) HasDropped() bool {
	if o != nil && !IsNil(o.Dropped) {
		return true
	}

	return false
}

// SetDropped gets a reference to the given bool and assigns it to the Dropped field.
func (o *RestRContact) SetDropped(v bool) {
	o.Dropped = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *RestRContact) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *RestRContact) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *RestRContact) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *RestRContact) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *RestRContact) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *RestRContact) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetTrackData returns the TrackData field value if set, zero value otherwise.
func (o *RestRContact) GetTrackData() string {
	if o == nil || IsNil(o.TrackData) {
		var ret string
		return ret
	}
	return *o.TrackData
}

// GetTrackDataOk returns a tuple with the TrackData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetTrackDataOk() (*string, bool) {
	if o == nil || IsNil(o.TrackData) {
		return nil, false
	}
	return o.TrackData, true
}

// HasTrackData returns a boolean if a field has been set.
func (o *RestRContact) HasTrackData() bool {
	if o != nil && !IsNil(o.TrackData) {
		return true
	}

	return false
}

// SetTrackData gets a reference to the given string and assigns it to the TrackData field.
func (o *RestRContact) SetTrackData(v string) {
	o.TrackData = &v
}

// GetContactSource returns the ContactSource field value if set, zero value otherwise.
func (o *RestRContact) GetContactSource() int32 {
	if o == nil || IsNil(o.ContactSource) {
		var ret int32
		return ret
	}
	return *o.ContactSource
}

// GetContactSourceOk returns a tuple with the ContactSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetContactSourceOk() (*int32, bool) {
	if o == nil || IsNil(o.ContactSource) {
		return nil, false
	}
	return o.ContactSource, true
}

// HasContactSource returns a boolean if a field has been set.
func (o *RestRContact) HasContactSource() bool {
	if o != nil && !IsNil(o.ContactSource) {
		return true
	}

	return false
}

// SetContactSource gets a reference to the given int32 and assigns it to the ContactSource field.
func (o *RestRContact) SetContactSource(v int32) {
	o.ContactSource = &v
}

// GetPageSource returns the PageSource field value if set, zero value otherwise.
func (o *RestRContact) GetPageSource() string {
	if o == nil || IsNil(o.PageSource) {
		var ret string
		return ret
	}
	return *o.PageSource
}

// GetPageSourceOk returns a tuple with the PageSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetPageSourceOk() (*string, bool) {
	if o == nil || IsNil(o.PageSource) {
		return nil, false
	}
	return o.PageSource, true
}

// HasPageSource returns a boolean if a field has been set.
func (o *RestRContact) HasPageSource() bool {
	if o != nil && !IsNil(o.PageSource) {
		return true
	}

	return false
}

// SetPageSource gets a reference to the given string and assigns it to the PageSource field.
func (o *RestRContact) SetPageSource(v string) {
	o.PageSource = &v
}

// GetLastTrackedIp returns the LastTrackedIp field value if set, zero value otherwise.
func (o *RestRContact) GetLastTrackedIp() string {
	if o == nil || IsNil(o.LastTrackedIp) {
		var ret string
		return ret
	}
	return *o.LastTrackedIp
}

// GetLastTrackedIpOk returns a tuple with the LastTrackedIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetLastTrackedIpOk() (*string, bool) {
	if o == nil || IsNil(o.LastTrackedIp) {
		return nil, false
	}
	return o.LastTrackedIp, true
}

// HasLastTrackedIp returns a boolean if a field has been set.
func (o *RestRContact) HasLastTrackedIp() bool {
	if o != nil && !IsNil(o.LastTrackedIp) {
		return true
	}

	return false
}

// SetLastTrackedIp gets a reference to the given string and assigns it to the LastTrackedIp field.
func (o *RestRContact) SetLastTrackedIp(v string) {
	o.LastTrackedIp = &v
}

// GetLTV returns the LTV field value if set, zero value otherwise.
func (o *RestRContact) GetLTV() int32 {
	if o == nil || IsNil(o.LTV) {
		var ret int32
		return ret
	}
	return *o.LTV
}

// GetLTVOk returns a tuple with the LTV field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRContact) GetLTVOk() (*int32, bool) {
	if o == nil || IsNil(o.LTV) {
		return nil, false
	}
	return o.LTV, true
}

// HasLTV returns a boolean if a field has been set.
func (o *RestRContact) HasLTV() bool {
	if o != nil && !IsNil(o.LTV) {
		return true
	}

	return false
}

// SetLTV gets a reference to the given int32 and assigns it to the LTV field.
func (o *RestRContact) SetLTV(v int32) {
	o.LTV = &v
}

func (o RestRContact) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestRContact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	if !IsNil(o.Lists) {
		toSerialize["lists"] = o.Lists
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Unsubscribed) {
		toSerialize["unsubscribed"] = o.Unsubscribed
	}
	if !IsNil(o.Bounced) {
		toSerialize["bounced"] = o.Bounced
	}
	if !IsNil(o.Spam) {
		toSerialize["spam"] = o.Spam
	}
	if !IsNil(o.Blocked) {
		toSerialize["blocked"] = o.Blocked
	}
	if !IsNil(o.Dropped) {
		toSerialize["dropped"] = o.Dropped
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.TrackData) {
		toSerialize["trackData"] = o.TrackData
	}
	if !IsNil(o.ContactSource) {
		toSerialize["contactSource"] = o.ContactSource
	}
	if !IsNil(o.PageSource) {
		toSerialize["pageSource"] = o.PageSource
	}
	if !IsNil(o.LastTrackedIp) {
		toSerialize["lastTrackedIp"] = o.LastTrackedIp
	}
	if !IsNil(o.LTV) {
		toSerialize["LTV"] = o.LTV
	}
	return toSerialize, nil
}

type NullableRestRContact struct {
	value *RestRContact
	isSet bool
}

func (v NullableRestRContact) Get() *RestRContact {
	return v.value
}

func (v *NullableRestRContact) Set(val *RestRContact) {
	v.value = val
	v.isSet = true
}

func (v NullableRestRContact) IsSet() bool {
	return v.isSet
}

func (v *NullableRestRContact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestRContact(val *RestRContact) *NullableRestRContact {
	return &NullableRestRContact{value: val, isSet: true}
}

func (v NullableRestRContact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestRContact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


