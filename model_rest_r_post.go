/*
SendX REST API

# SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 

API version: 1.0.0
Contact: hello@sendx.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendx

import (
	"encoding/json"
	"time"
)

// checks if the RestRPost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestRPost{}

// RestRPost struct for RestRPost
type RestRPost struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	PostTitle *string `json:"postTitle,omitempty"`
	PostDescription *string `json:"postDescription,omitempty"`
	PostCategory *string `json:"postCategory,omitempty"`
	Member *string `json:"member,omitempty"`
	PostThumbnail *string `json:"postThumbnail,omitempty"`
	IsPublished *bool `json:"isPublished,omitempty"`
	IncludedTags []string `json:"includedTags,omitempty"`
	PostSlug *string `json:"postSlug,omitempty"`
	Status *int32 `json:"status,omitempty"`
	PageTitle *string `json:"pageTitle,omitempty"`
	PageDescription *string `json:"pageDescription,omitempty"`
	PageKeywords *string `json:"pageKeywords,omitempty"`
	SocialTitle *string `json:"socialTitle,omitempty"`
	SocialDescription *string `json:"socialDescription,omitempty"`
	SocialImageUrl *string `json:"socialImageUrl,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
}

// NewRestRPost instantiates a new RestRPost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestRPost() *RestRPost {
	this := RestRPost{}
	return &this
}

// NewRestRPostWithDefaults instantiates a new RestRPost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestRPostWithDefaults() *RestRPost {
	this := RestRPost{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RestRPost) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RestRPost) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RestRPost) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RestRPost) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RestRPost) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RestRPost) SetName(v string) {
	o.Name = &v
}

// GetPostTitle returns the PostTitle field value if set, zero value otherwise.
func (o *RestRPost) GetPostTitle() string {
	if o == nil || IsNil(o.PostTitle) {
		var ret string
		return ret
	}
	return *o.PostTitle
}

// GetPostTitleOk returns a tuple with the PostTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetPostTitleOk() (*string, bool) {
	if o == nil || IsNil(o.PostTitle) {
		return nil, false
	}
	return o.PostTitle, true
}

// HasPostTitle returns a boolean if a field has been set.
func (o *RestRPost) HasPostTitle() bool {
	if o != nil && !IsNil(o.PostTitle) {
		return true
	}

	return false
}

// SetPostTitle gets a reference to the given string and assigns it to the PostTitle field.
func (o *RestRPost) SetPostTitle(v string) {
	o.PostTitle = &v
}

// GetPostDescription returns the PostDescription field value if set, zero value otherwise.
func (o *RestRPost) GetPostDescription() string {
	if o == nil || IsNil(o.PostDescription) {
		var ret string
		return ret
	}
	return *o.PostDescription
}

// GetPostDescriptionOk returns a tuple with the PostDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetPostDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.PostDescription) {
		return nil, false
	}
	return o.PostDescription, true
}

// HasPostDescription returns a boolean if a field has been set.
func (o *RestRPost) HasPostDescription() bool {
	if o != nil && !IsNil(o.PostDescription) {
		return true
	}

	return false
}

// SetPostDescription gets a reference to the given string and assigns it to the PostDescription field.
func (o *RestRPost) SetPostDescription(v string) {
	o.PostDescription = &v
}

// GetPostCategory returns the PostCategory field value if set, zero value otherwise.
func (o *RestRPost) GetPostCategory() string {
	if o == nil || IsNil(o.PostCategory) {
		var ret string
		return ret
	}
	return *o.PostCategory
}

// GetPostCategoryOk returns a tuple with the PostCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetPostCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.PostCategory) {
		return nil, false
	}
	return o.PostCategory, true
}

// HasPostCategory returns a boolean if a field has been set.
func (o *RestRPost) HasPostCategory() bool {
	if o != nil && !IsNil(o.PostCategory) {
		return true
	}

	return false
}

// SetPostCategory gets a reference to the given string and assigns it to the PostCategory field.
func (o *RestRPost) SetPostCategory(v string) {
	o.PostCategory = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *RestRPost) GetMember() string {
	if o == nil || IsNil(o.Member) {
		var ret string
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetMemberOk() (*string, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *RestRPost) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given string and assigns it to the Member field.
func (o *RestRPost) SetMember(v string) {
	o.Member = &v
}

// GetPostThumbnail returns the PostThumbnail field value if set, zero value otherwise.
func (o *RestRPost) GetPostThumbnail() string {
	if o == nil || IsNil(o.PostThumbnail) {
		var ret string
		return ret
	}
	return *o.PostThumbnail
}

// GetPostThumbnailOk returns a tuple with the PostThumbnail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetPostThumbnailOk() (*string, bool) {
	if o == nil || IsNil(o.PostThumbnail) {
		return nil, false
	}
	return o.PostThumbnail, true
}

// HasPostThumbnail returns a boolean if a field has been set.
func (o *RestRPost) HasPostThumbnail() bool {
	if o != nil && !IsNil(o.PostThumbnail) {
		return true
	}

	return false
}

// SetPostThumbnail gets a reference to the given string and assigns it to the PostThumbnail field.
func (o *RestRPost) SetPostThumbnail(v string) {
	o.PostThumbnail = &v
}

// GetIsPublished returns the IsPublished field value if set, zero value otherwise.
func (o *RestRPost) GetIsPublished() bool {
	if o == nil || IsNil(o.IsPublished) {
		var ret bool
		return ret
	}
	return *o.IsPublished
}

// GetIsPublishedOk returns a tuple with the IsPublished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetIsPublishedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublished) {
		return nil, false
	}
	return o.IsPublished, true
}

// HasIsPublished returns a boolean if a field has been set.
func (o *RestRPost) HasIsPublished() bool {
	if o != nil && !IsNil(o.IsPublished) {
		return true
	}

	return false
}

// SetIsPublished gets a reference to the given bool and assigns it to the IsPublished field.
func (o *RestRPost) SetIsPublished(v bool) {
	o.IsPublished = &v
}

// GetIncludedTags returns the IncludedTags field value if set, zero value otherwise.
func (o *RestRPost) GetIncludedTags() []string {
	if o == nil || IsNil(o.IncludedTags) {
		var ret []string
		return ret
	}
	return o.IncludedTags
}

// GetIncludedTagsOk returns a tuple with the IncludedTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetIncludedTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedTags) {
		return nil, false
	}
	return o.IncludedTags, true
}

// HasIncludedTags returns a boolean if a field has been set.
func (o *RestRPost) HasIncludedTags() bool {
	if o != nil && !IsNil(o.IncludedTags) {
		return true
	}

	return false
}

// SetIncludedTags gets a reference to the given []string and assigns it to the IncludedTags field.
func (o *RestRPost) SetIncludedTags(v []string) {
	o.IncludedTags = v
}

// GetPostSlug returns the PostSlug field value if set, zero value otherwise.
func (o *RestRPost) GetPostSlug() string {
	if o == nil || IsNil(o.PostSlug) {
		var ret string
		return ret
	}
	return *o.PostSlug
}

// GetPostSlugOk returns a tuple with the PostSlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetPostSlugOk() (*string, bool) {
	if o == nil || IsNil(o.PostSlug) {
		return nil, false
	}
	return o.PostSlug, true
}

// HasPostSlug returns a boolean if a field has been set.
func (o *RestRPost) HasPostSlug() bool {
	if o != nil && !IsNil(o.PostSlug) {
		return true
	}

	return false
}

// SetPostSlug gets a reference to the given string and assigns it to the PostSlug field.
func (o *RestRPost) SetPostSlug(v string) {
	o.PostSlug = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RestRPost) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RestRPost) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *RestRPost) SetStatus(v int32) {
	o.Status = &v
}

// GetPageTitle returns the PageTitle field value if set, zero value otherwise.
func (o *RestRPost) GetPageTitle() string {
	if o == nil || IsNil(o.PageTitle) {
		var ret string
		return ret
	}
	return *o.PageTitle
}

// GetPageTitleOk returns a tuple with the PageTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetPageTitleOk() (*string, bool) {
	if o == nil || IsNil(o.PageTitle) {
		return nil, false
	}
	return o.PageTitle, true
}

// HasPageTitle returns a boolean if a field has been set.
func (o *RestRPost) HasPageTitle() bool {
	if o != nil && !IsNil(o.PageTitle) {
		return true
	}

	return false
}

// SetPageTitle gets a reference to the given string and assigns it to the PageTitle field.
func (o *RestRPost) SetPageTitle(v string) {
	o.PageTitle = &v
}

// GetPageDescription returns the PageDescription field value if set, zero value otherwise.
func (o *RestRPost) GetPageDescription() string {
	if o == nil || IsNil(o.PageDescription) {
		var ret string
		return ret
	}
	return *o.PageDescription
}

// GetPageDescriptionOk returns a tuple with the PageDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetPageDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.PageDescription) {
		return nil, false
	}
	return o.PageDescription, true
}

// HasPageDescription returns a boolean if a field has been set.
func (o *RestRPost) HasPageDescription() bool {
	if o != nil && !IsNil(o.PageDescription) {
		return true
	}

	return false
}

// SetPageDescription gets a reference to the given string and assigns it to the PageDescription field.
func (o *RestRPost) SetPageDescription(v string) {
	o.PageDescription = &v
}

// GetPageKeywords returns the PageKeywords field value if set, zero value otherwise.
func (o *RestRPost) GetPageKeywords() string {
	if o == nil || IsNil(o.PageKeywords) {
		var ret string
		return ret
	}
	return *o.PageKeywords
}

// GetPageKeywordsOk returns a tuple with the PageKeywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetPageKeywordsOk() (*string, bool) {
	if o == nil || IsNil(o.PageKeywords) {
		return nil, false
	}
	return o.PageKeywords, true
}

// HasPageKeywords returns a boolean if a field has been set.
func (o *RestRPost) HasPageKeywords() bool {
	if o != nil && !IsNil(o.PageKeywords) {
		return true
	}

	return false
}

// SetPageKeywords gets a reference to the given string and assigns it to the PageKeywords field.
func (o *RestRPost) SetPageKeywords(v string) {
	o.PageKeywords = &v
}

// GetSocialTitle returns the SocialTitle field value if set, zero value otherwise.
func (o *RestRPost) GetSocialTitle() string {
	if o == nil || IsNil(o.SocialTitle) {
		var ret string
		return ret
	}
	return *o.SocialTitle
}

// GetSocialTitleOk returns a tuple with the SocialTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetSocialTitleOk() (*string, bool) {
	if o == nil || IsNil(o.SocialTitle) {
		return nil, false
	}
	return o.SocialTitle, true
}

// HasSocialTitle returns a boolean if a field has been set.
func (o *RestRPost) HasSocialTitle() bool {
	if o != nil && !IsNil(o.SocialTitle) {
		return true
	}

	return false
}

// SetSocialTitle gets a reference to the given string and assigns it to the SocialTitle field.
func (o *RestRPost) SetSocialTitle(v string) {
	o.SocialTitle = &v
}

// GetSocialDescription returns the SocialDescription field value if set, zero value otherwise.
func (o *RestRPost) GetSocialDescription() string {
	if o == nil || IsNil(o.SocialDescription) {
		var ret string
		return ret
	}
	return *o.SocialDescription
}

// GetSocialDescriptionOk returns a tuple with the SocialDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetSocialDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.SocialDescription) {
		return nil, false
	}
	return o.SocialDescription, true
}

// HasSocialDescription returns a boolean if a field has been set.
func (o *RestRPost) HasSocialDescription() bool {
	if o != nil && !IsNil(o.SocialDescription) {
		return true
	}

	return false
}

// SetSocialDescription gets a reference to the given string and assigns it to the SocialDescription field.
func (o *RestRPost) SetSocialDescription(v string) {
	o.SocialDescription = &v
}

// GetSocialImageUrl returns the SocialImageUrl field value if set, zero value otherwise.
func (o *RestRPost) GetSocialImageUrl() string {
	if o == nil || IsNil(o.SocialImageUrl) {
		var ret string
		return ret
	}
	return *o.SocialImageUrl
}

// GetSocialImageUrlOk returns a tuple with the SocialImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetSocialImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SocialImageUrl) {
		return nil, false
	}
	return o.SocialImageUrl, true
}

// HasSocialImageUrl returns a boolean if a field has been set.
func (o *RestRPost) HasSocialImageUrl() bool {
	if o != nil && !IsNil(o.SocialImageUrl) {
		return true
	}

	return false
}

// SetSocialImageUrl gets a reference to the given string and assigns it to the SocialImageUrl field.
func (o *RestRPost) SetSocialImageUrl(v string) {
	o.SocialImageUrl = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *RestRPost) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *RestRPost) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *RestRPost) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *RestRPost) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRPost) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *RestRPost) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *RestRPost) SetUpdated(v time.Time) {
	o.Updated = &v
}

func (o RestRPost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestRPost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PostTitle) {
		toSerialize["postTitle"] = o.PostTitle
	}
	if !IsNil(o.PostDescription) {
		toSerialize["postDescription"] = o.PostDescription
	}
	if !IsNil(o.PostCategory) {
		toSerialize["postCategory"] = o.PostCategory
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.PostThumbnail) {
		toSerialize["postThumbnail"] = o.PostThumbnail
	}
	if !IsNil(o.IsPublished) {
		toSerialize["isPublished"] = o.IsPublished
	}
	if !IsNil(o.IncludedTags) {
		toSerialize["includedTags"] = o.IncludedTags
	}
	if !IsNil(o.PostSlug) {
		toSerialize["postSlug"] = o.PostSlug
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.PageTitle) {
		toSerialize["pageTitle"] = o.PageTitle
	}
	if !IsNil(o.PageDescription) {
		toSerialize["pageDescription"] = o.PageDescription
	}
	if !IsNil(o.PageKeywords) {
		toSerialize["pageKeywords"] = o.PageKeywords
	}
	if !IsNil(o.SocialTitle) {
		toSerialize["socialTitle"] = o.SocialTitle
	}
	if !IsNil(o.SocialDescription) {
		toSerialize["socialDescription"] = o.SocialDescription
	}
	if !IsNil(o.SocialImageUrl) {
		toSerialize["socialImageUrl"] = o.SocialImageUrl
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

type NullableRestRPost struct {
	value *RestRPost
	isSet bool
}

func (v NullableRestRPost) Get() *RestRPost {
	return v.value
}

func (v *NullableRestRPost) Set(val *RestRPost) {
	v.value = val
	v.isSet = true
}

func (v NullableRestRPost) IsSet() bool {
	return v.isSet
}

func (v *NullableRestRPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestRPost(val *RestRPost) *NullableRestRPost {
	return &NullableRestRPost{value: val, isSet: true}
}

func (v NullableRestRPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestRPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


