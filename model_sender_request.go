/*
SendX REST API

# Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

API version: 1.0.0
Contact: support@sendx.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SenderRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SenderRequest{}

// SenderRequest struct for SenderRequest
type SenderRequest struct {
	// Name of the sender
	Name string `json:"name"`
	// Email address of the sender
	Email string `json:"email"`
}

type _SenderRequest SenderRequest

// NewSenderRequest instantiates a new SenderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSenderRequest(name string, email string) *SenderRequest {
	this := SenderRequest{}
	this.Name = name
	this.Email = email
	return &this
}

// NewSenderRequestWithDefaults instantiates a new SenderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSenderRequestWithDefaults() *SenderRequest {
	this := SenderRequest{}
	return &this
}

// GetName returns the Name field value
func (o *SenderRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SenderRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SenderRequest) SetName(v string) {
	o.Name = v
}

// GetEmail returns the Email field value
func (o *SenderRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *SenderRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *SenderRequest) SetEmail(v string) {
	o.Email = v
}

func (o SenderRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SenderRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["email"] = o.Email
	return toSerialize, nil
}

func (o *SenderRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSenderRequest := _SenderRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSenderRequest)

	if err != nil {
		return err
	}

	*o = SenderRequest(varSenderRequest)

	return err
}

type NullableSenderRequest struct {
	value *SenderRequest
	isSet bool
}

func (v NullableSenderRequest) Get() *SenderRequest {
	return v.value
}

func (v *NullableSenderRequest) Set(val *SenderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSenderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSenderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSenderRequest(val *SenderRequest) *NullableSenderRequest {
	return &NullableSenderRequest{value: val, isSet: true}
}

func (v NullableSenderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSenderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


