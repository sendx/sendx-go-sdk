/*
SendX REST API

# Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

API version: 1.0.0
Contact: support@sendx.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendx

import (
	"encoding/json"
)

// checks if the DashboardStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardStats{}

// DashboardStats struct for DashboardStats
type DashboardStats struct {
	LastEmailCampaignStat *LastSentCampaignStat `json:"lastEmailCampaignStat,omitempty"`
	// Number of newsletters sent.
	NewsletterCount *int32 `json:"newsletterCount,omitempty"`
	// Number of automations set up.
	AutomationCount *int32 `json:"automationCount,omitempty"`
}

// NewDashboardStats instantiates a new DashboardStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardStats() *DashboardStats {
	this := DashboardStats{}
	return &this
}

// NewDashboardStatsWithDefaults instantiates a new DashboardStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardStatsWithDefaults() *DashboardStats {
	this := DashboardStats{}
	return &this
}

// GetLastEmailCampaignStat returns the LastEmailCampaignStat field value if set, zero value otherwise.
func (o *DashboardStats) GetLastEmailCampaignStat() LastSentCampaignStat {
	if o == nil || IsNil(o.LastEmailCampaignStat) {
		var ret LastSentCampaignStat
		return ret
	}
	return *o.LastEmailCampaignStat
}

// GetLastEmailCampaignStatOk returns a tuple with the LastEmailCampaignStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardStats) GetLastEmailCampaignStatOk() (*LastSentCampaignStat, bool) {
	if o == nil || IsNil(o.LastEmailCampaignStat) {
		return nil, false
	}
	return o.LastEmailCampaignStat, true
}

// HasLastEmailCampaignStat returns a boolean if a field has been set.
func (o *DashboardStats) HasLastEmailCampaignStat() bool {
	if o != nil && !IsNil(o.LastEmailCampaignStat) {
		return true
	}

	return false
}

// SetLastEmailCampaignStat gets a reference to the given LastSentCampaignStat and assigns it to the LastEmailCampaignStat field.
func (o *DashboardStats) SetLastEmailCampaignStat(v LastSentCampaignStat) {
	o.LastEmailCampaignStat = &v
}

// GetNewsletterCount returns the NewsletterCount field value if set, zero value otherwise.
func (o *DashboardStats) GetNewsletterCount() int32 {
	if o == nil || IsNil(o.NewsletterCount) {
		var ret int32
		return ret
	}
	return *o.NewsletterCount
}

// GetNewsletterCountOk returns a tuple with the NewsletterCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardStats) GetNewsletterCountOk() (*int32, bool) {
	if o == nil || IsNil(o.NewsletterCount) {
		return nil, false
	}
	return o.NewsletterCount, true
}

// HasNewsletterCount returns a boolean if a field has been set.
func (o *DashboardStats) HasNewsletterCount() bool {
	if o != nil && !IsNil(o.NewsletterCount) {
		return true
	}

	return false
}

// SetNewsletterCount gets a reference to the given int32 and assigns it to the NewsletterCount field.
func (o *DashboardStats) SetNewsletterCount(v int32) {
	o.NewsletterCount = &v
}

// GetAutomationCount returns the AutomationCount field value if set, zero value otherwise.
func (o *DashboardStats) GetAutomationCount() int32 {
	if o == nil || IsNil(o.AutomationCount) {
		var ret int32
		return ret
	}
	return *o.AutomationCount
}

// GetAutomationCountOk returns a tuple with the AutomationCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardStats) GetAutomationCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AutomationCount) {
		return nil, false
	}
	return o.AutomationCount, true
}

// HasAutomationCount returns a boolean if a field has been set.
func (o *DashboardStats) HasAutomationCount() bool {
	if o != nil && !IsNil(o.AutomationCount) {
		return true
	}

	return false
}

// SetAutomationCount gets a reference to the given int32 and assigns it to the AutomationCount field.
func (o *DashboardStats) SetAutomationCount(v int32) {
	o.AutomationCount = &v
}

func (o DashboardStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LastEmailCampaignStat) {
		toSerialize["lastEmailCampaignStat"] = o.LastEmailCampaignStat
	}
	if !IsNil(o.NewsletterCount) {
		toSerialize["newsletterCount"] = o.NewsletterCount
	}
	if !IsNil(o.AutomationCount) {
		toSerialize["automationCount"] = o.AutomationCount
	}
	return toSerialize, nil
}

type NullableDashboardStats struct {
	value *DashboardStats
	isSet bool
}

func (v NullableDashboardStats) Get() *DashboardStats {
	return v.value
}

func (v *NullableDashboardStats) Set(val *DashboardStats) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardStats) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardStats(val *DashboardStats) *NullableDashboardStats {
	return &NullableDashboardStats{value: val, isSet: true}
}

func (v NullableDashboardStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


