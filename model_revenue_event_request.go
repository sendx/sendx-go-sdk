/*
SendX REST API

# Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

API version: 1.0.0
Contact: support@sendx.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RevenueEventRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevenueEventRequest{}

// RevenueEventRequest struct for RevenueEventRequest
type RevenueEventRequest struct {
	// Unique identifier for the contact.
	Identifier string `json:"identifier"`
	// Recognized revenue amount associated with the event.
	Amount float32 `json:"amount"`
	// Currency code (ISO 4217) for the revenue (e.g., 'USD', 'EUR', 'INR').
	Currency string `json:"currency"`
	// Source of the revenue (e.g., 'website', 'mobile app', 'partner referral').
	Source string `json:"source"`
	// Unix timestamp indicating when the revenue event occurred.
	Time int32 `json:"time"`
}

type _RevenueEventRequest RevenueEventRequest

// NewRevenueEventRequest instantiates a new RevenueEventRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevenueEventRequest(identifier string, amount float32, currency string, source string, time int32) *RevenueEventRequest {
	this := RevenueEventRequest{}
	this.Identifier = identifier
	this.Amount = amount
	this.Currency = currency
	this.Source = source
	this.Time = time
	return &this
}

// NewRevenueEventRequestWithDefaults instantiates a new RevenueEventRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevenueEventRequestWithDefaults() *RevenueEventRequest {
	this := RevenueEventRequest{}
	return &this
}

// GetIdentifier returns the Identifier field value
func (o *RevenueEventRequest) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *RevenueEventRequest) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *RevenueEventRequest) SetIdentifier(v string) {
	o.Identifier = v
}

// GetAmount returns the Amount field value
func (o *RevenueEventRequest) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *RevenueEventRequest) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *RevenueEventRequest) SetAmount(v float32) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *RevenueEventRequest) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *RevenueEventRequest) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *RevenueEventRequest) SetCurrency(v string) {
	o.Currency = v
}

// GetSource returns the Source field value
func (o *RevenueEventRequest) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *RevenueEventRequest) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *RevenueEventRequest) SetSource(v string) {
	o.Source = v
}

// GetTime returns the Time field value
func (o *RevenueEventRequest) GetTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *RevenueEventRequest) GetTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *RevenueEventRequest) SetTime(v int32) {
	o.Time = v
}

func (o RevenueEventRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevenueEventRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identifier"] = o.Identifier
	toSerialize["amount"] = o.Amount
	toSerialize["currency"] = o.Currency
	toSerialize["source"] = o.Source
	toSerialize["time"] = o.Time
	return toSerialize, nil
}

func (o *RevenueEventRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
		"amount",
		"currency",
		"source",
		"time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRevenueEventRequest := _RevenueEventRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRevenueEventRequest)

	if err != nil {
		return err
	}

	*o = RevenueEventRequest(varRevenueEventRequest)

	return err
}

type NullableRevenueEventRequest struct {
	value *RevenueEventRequest
	isSet bool
}

func (v NullableRevenueEventRequest) Get() *RevenueEventRequest {
	return v.value
}

func (v *NullableRevenueEventRequest) Set(val *RevenueEventRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRevenueEventRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRevenueEventRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevenueEventRequest(val *RevenueEventRequest) *NullableRevenueEventRequest {
	return &NullableRevenueEventRequest{value: val, isSet: true}
}

func (v NullableRevenueEventRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevenueEventRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


