/*
SendX REST API

# SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 

API version: 1.0.0
Contact: hello@sendx.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestEPost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestEPost{}

// RestEPost struct for RestEPost
type RestEPost struct {
	// Internal post name
	Name string `json:"name"`
	// Public post title
	PostTitle string `json:"postTitle"`
	// Post excerpt/description
	PostDescription *string `json:"postDescription,omitempty"`
	// Category ID (with or without prefix)
	PostCategory *string `json:"postCategory,omitempty"`
	// Author member ID
	Member *string `json:"member,omitempty"`
	// Thumbnail image URL
	PostThumbnail *string `json:"postThumbnail,omitempty"`
	// Post HTML content
	PostHtml *string `json:"postHtml,omitempty"`
	// Post template
	PostTemplate *string `json:"postTemplate,omitempty"`
	// Publication status
	IsPublished *bool `json:"isPublished,omitempty"`
	// Post tag IDs
	IncludedTags []string `json:"includedTags,omitempty"`
	// Editor type used
	EditorType *int32 `json:"editorType,omitempty"`
	// URL slug
	PostSlug *string `json:"postSlug,omitempty"`
	// Post status
	Status *int32 `json:"status,omitempty"`
	// SEO page title
	PageTitle *string `json:"pageTitle,omitempty"`
	// SEO meta description
	PageDescription *string `json:"pageDescription,omitempty"`
	// SEO keywords
	PageKeywords *string `json:"pageKeywords,omitempty"`
	// Social media title
	SocialTitle *string `json:"socialTitle,omitempty"`
	// Social media description
	SocialDescription *string `json:"socialDescription,omitempty"`
	// Social media image URL
	SocialImageUrl *string `json:"socialImageUrl,omitempty"`
}

type _RestEPost RestEPost

// NewRestEPost instantiates a new RestEPost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestEPost(name string, postTitle string) *RestEPost {
	this := RestEPost{}
	this.Name = name
	this.PostTitle = postTitle
	var isPublished bool = false
	this.IsPublished = &isPublished
	var editorType int32 = 1
	this.EditorType = &editorType
	var status int32 = 1
	this.Status = &status
	return &this
}

// NewRestEPostWithDefaults instantiates a new RestEPost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestEPostWithDefaults() *RestEPost {
	this := RestEPost{}
	var isPublished bool = false
	this.IsPublished = &isPublished
	var editorType int32 = 1
	this.EditorType = &editorType
	var status int32 = 1
	this.Status = &status
	return &this
}

// GetName returns the Name field value
func (o *RestEPost) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RestEPost) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RestEPost) SetName(v string) {
	o.Name = v
}

// GetPostTitle returns the PostTitle field value
func (o *RestEPost) GetPostTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PostTitle
}

// GetPostTitleOk returns a tuple with the PostTitle field value
// and a boolean to check if the value has been set.
func (o *RestEPost) GetPostTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostTitle, true
}

// SetPostTitle sets field value
func (o *RestEPost) SetPostTitle(v string) {
	o.PostTitle = v
}

// GetPostDescription returns the PostDescription field value if set, zero value otherwise.
func (o *RestEPost) GetPostDescription() string {
	if o == nil || IsNil(o.PostDescription) {
		var ret string
		return ret
	}
	return *o.PostDescription
}

// GetPostDescriptionOk returns a tuple with the PostDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEPost) GetPostDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.PostDescription) {
		return nil, false
	}
	return o.PostDescription, true
}

// HasPostDescription returns a boolean if a field has been set.
func (o *RestEPost) HasPostDescription() bool {
	if o != nil && !IsNil(o.PostDescription) {
		return true
	}

	return false
}

// SetPostDescription gets a reference to the given string and assigns it to the PostDescription field.
func (o *RestEPost) SetPostDescription(v string) {
	o.PostDescription = &v
}

// GetPostCategory returns the PostCategory field value if set, zero value otherwise.
func (o *RestEPost) GetPostCategory() string {
	if o == nil || IsNil(o.PostCategory) {
		var ret string
		return ret
	}
	return *o.PostCategory
}

// GetPostCategoryOk returns a tuple with the PostCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEPost) GetPostCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.PostCategory) {
		return nil, false
	}
	return o.PostCategory, true
}

// HasPostCategory returns a boolean if a field has been set.
func (o *RestEPost) HasPostCategory() bool {
	if o != nil && !IsNil(o.PostCategory) {
		return true
	}

	return false
}

// SetPostCategory gets a reference to the given string and assigns it to the PostCategory field.
func (o *RestEPost) SetPostCategory(v string) {
	o.PostCategory = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *RestEPost) GetMember() string {
	if o == nil || IsNil(o.Member) {
		var ret string
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEPost) GetMemberOk() (*string, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *RestEPost) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given string and assigns it to the Member field.
func (o *RestEPost) SetMember(v string) {
	o.Member = &v
}

// GetPostThumbnail returns the PostThumbnail field value if set, zero value otherwise.
func (o *RestEPost) GetPostThumbnail() string {
	if o == nil || IsNil(o.PostThumbnail) {
		var ret string
		return ret
	}
	return *o.PostThumbnail
}

// GetPostThumbnailOk returns a tuple with the PostThumbnail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEPost) GetPostThumbnailOk() (*string, bool) {
	if o == nil || IsNil(o.PostThumbnail) {
		return nil, false
	}
	return o.PostThumbnail, true
}

// HasPostThumbnail returns a boolean if a field has been set.
func (o *RestEPost) HasPostThumbnail() bool {
	if o != nil && !IsNil(o.PostThumbnail) {
		return true
	}

	return false
}

// SetPostThumbnail gets a reference to the given string and assigns it to the PostThumbnail field.
func (o *RestEPost) SetPostThumbnail(v string) {
	o.PostThumbnail = &v
}

// GetPostHtml returns the PostHtml field value if set, zero value otherwise.
func (o *RestEPost) GetPostHtml() string {
	if o == nil || IsNil(o.PostHtml) {
		var ret string
		return ret
	}
	return *o.PostHtml
}

// GetPostHtmlOk returns a tuple with the PostHtml field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEPost) GetPostHtmlOk() (*string, bool) {
	if o == nil || IsNil(o.PostHtml) {
		return nil, false
	}
	return o.PostHtml, true
}

// HasPostHtml returns a boolean if a field has been set.
func (o *RestEPost) HasPostHtml() bool {
	if o != nil && !IsNil(o.PostHtml) {
		return true
	}

	return false
}

// SetPostHtml gets a reference to the given string and assigns it to the PostHtml field.
func (o *RestEPost) SetPostHtml(v string) {
	o.PostHtml = &v
}

// GetPostTemplate returns the PostTemplate field value if set, zero value otherwise.
func (o *RestEPost) GetPostTemplate() string {
	if o == nil || IsNil(o.PostTemplate) {
		var ret string
		return ret
	}
	return *o.PostTemplate
}

// GetPostTemplateOk returns a tuple with the PostTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEPost) GetPostTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.PostTemplate) {
		return nil, false
	}
	return o.PostTemplate, true
}

// HasPostTemplate returns a boolean if a field has been set.
func (o *RestEPost) HasPostTemplate() bool {
	if o != nil && !IsNil(o.PostTemplate) {
		return true
	}

	return false
}

// SetPostTemplate gets a reference to the given string and assigns it to the PostTemplate field.
func (o *RestEPost) SetPostTemplate(v string) {
	o.PostTemplate = &v
}

// GetIsPublished returns the IsPublished field value if set, zero value otherwise.
func (o *RestEPost) GetIsPublished() bool {
	if o == nil || IsNil(o.IsPublished) {
		var ret bool
		return ret
	}
	return *o.IsPublished
}

// GetIsPublishedOk returns a tuple with the IsPublished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEPost) GetIsPublishedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublished) {
		return nil, false
	}
	return o.IsPublished, true
}

// HasIsPublished returns a boolean if a field has been set.
func (o *RestEPost) HasIsPublished() bool {
	if o != nil && !IsNil(o.IsPublished) {
		return true
	}

	return false
}

// SetIsPublished gets a reference to the given bool and assigns it to the IsPublished field.
func (o *RestEPost) SetIsPublished(v bool) {
	o.IsPublished = &v
}

// GetIncludedTags returns the IncludedTags field value if set, zero value otherwise.
func (o *RestEPost) GetIncludedTags() []string {
	if o == nil || IsNil(o.IncludedTags) {
		var ret []string
		return ret
	}
	return o.IncludedTags
}

// GetIncludedTagsOk returns a tuple with the IncludedTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEPost) GetIncludedTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedTags) {
		return nil, false
	}
	return o.IncludedTags, true
}

// HasIncludedTags returns a boolean if a field has been set.
func (o *RestEPost) HasIncludedTags() bool {
	if o != nil && !IsNil(o.IncludedTags) {
		return true
	}

	return false
}

// SetIncludedTags gets a reference to the given []string and assigns it to the IncludedTags field.
func (o *RestEPost) SetIncludedTags(v []string) {
	o.IncludedTags = v
}

// GetEditorType returns the EditorType field value if set, zero value otherwise.
func (o *RestEPost) GetEditorType() int32 {
	if o == nil || IsNil(o.EditorType) {
		var ret int32
		return ret
	}
	return *o.EditorType
}

// GetEditorTypeOk returns a tuple with the EditorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEPost) GetEditorTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.EditorType) {
		return nil, false
	}
	return o.EditorType, true
}

// HasEditorType returns a boolean if a field has been set.
func (o *RestEPost) HasEditorType() bool {
	if o != nil && !IsNil(o.EditorType) {
		return true
	}

	return false
}

// SetEditorType gets a reference to the given int32 and assigns it to the EditorType field.
func (o *RestEPost) SetEditorType(v int32) {
	o.EditorType = &v
}

// GetPostSlug returns the PostSlug field value if set, zero value otherwise.
func (o *RestEPost) GetPostSlug() string {
	if o == nil || IsNil(o.PostSlug) {
		var ret string
		return ret
	}
	return *o.PostSlug
}

// GetPostSlugOk returns a tuple with the PostSlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEPost) GetPostSlugOk() (*string, bool) {
	if o == nil || IsNil(o.PostSlug) {
		return nil, false
	}
	return o.PostSlug, true
}

// HasPostSlug returns a boolean if a field has been set.
func (o *RestEPost) HasPostSlug() bool {
	if o != nil && !IsNil(o.PostSlug) {
		return true
	}

	return false
}

// SetPostSlug gets a reference to the given string and assigns it to the PostSlug field.
func (o *RestEPost) SetPostSlug(v string) {
	o.PostSlug = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RestEPost) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEPost) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RestEPost) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *RestEPost) SetStatus(v int32) {
	o.Status = &v
}

// GetPageTitle returns the PageTitle field value if set, zero value otherwise.
func (o *RestEPost) GetPageTitle() string {
	if o == nil || IsNil(o.PageTitle) {
		var ret string
		return ret
	}
	return *o.PageTitle
}

// GetPageTitleOk returns a tuple with the PageTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEPost) GetPageTitleOk() (*string, bool) {
	if o == nil || IsNil(o.PageTitle) {
		return nil, false
	}
	return o.PageTitle, true
}

// HasPageTitle returns a boolean if a field has been set.
func (o *RestEPost) HasPageTitle() bool {
	if o != nil && !IsNil(o.PageTitle) {
		return true
	}

	return false
}

// SetPageTitle gets a reference to the given string and assigns it to the PageTitle field.
func (o *RestEPost) SetPageTitle(v string) {
	o.PageTitle = &v
}

// GetPageDescription returns the PageDescription field value if set, zero value otherwise.
func (o *RestEPost) GetPageDescription() string {
	if o == nil || IsNil(o.PageDescription) {
		var ret string
		return ret
	}
	return *o.PageDescription
}

// GetPageDescriptionOk returns a tuple with the PageDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEPost) GetPageDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.PageDescription) {
		return nil, false
	}
	return o.PageDescription, true
}

// HasPageDescription returns a boolean if a field has been set.
func (o *RestEPost) HasPageDescription() bool {
	if o != nil && !IsNil(o.PageDescription) {
		return true
	}

	return false
}

// SetPageDescription gets a reference to the given string and assigns it to the PageDescription field.
func (o *RestEPost) SetPageDescription(v string) {
	o.PageDescription = &v
}

// GetPageKeywords returns the PageKeywords field value if set, zero value otherwise.
func (o *RestEPost) GetPageKeywords() string {
	if o == nil || IsNil(o.PageKeywords) {
		var ret string
		return ret
	}
	return *o.PageKeywords
}

// GetPageKeywordsOk returns a tuple with the PageKeywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEPost) GetPageKeywordsOk() (*string, bool) {
	if o == nil || IsNil(o.PageKeywords) {
		return nil, false
	}
	return o.PageKeywords, true
}

// HasPageKeywords returns a boolean if a field has been set.
func (o *RestEPost) HasPageKeywords() bool {
	if o != nil && !IsNil(o.PageKeywords) {
		return true
	}

	return false
}

// SetPageKeywords gets a reference to the given string and assigns it to the PageKeywords field.
func (o *RestEPost) SetPageKeywords(v string) {
	o.PageKeywords = &v
}

// GetSocialTitle returns the SocialTitle field value if set, zero value otherwise.
func (o *RestEPost) GetSocialTitle() string {
	if o == nil || IsNil(o.SocialTitle) {
		var ret string
		return ret
	}
	return *o.SocialTitle
}

// GetSocialTitleOk returns a tuple with the SocialTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEPost) GetSocialTitleOk() (*string, bool) {
	if o == nil || IsNil(o.SocialTitle) {
		return nil, false
	}
	return o.SocialTitle, true
}

// HasSocialTitle returns a boolean if a field has been set.
func (o *RestEPost) HasSocialTitle() bool {
	if o != nil && !IsNil(o.SocialTitle) {
		return true
	}

	return false
}

// SetSocialTitle gets a reference to the given string and assigns it to the SocialTitle field.
func (o *RestEPost) SetSocialTitle(v string) {
	o.SocialTitle = &v
}

// GetSocialDescription returns the SocialDescription field value if set, zero value otherwise.
func (o *RestEPost) GetSocialDescription() string {
	if o == nil || IsNil(o.SocialDescription) {
		var ret string
		return ret
	}
	return *o.SocialDescription
}

// GetSocialDescriptionOk returns a tuple with the SocialDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEPost) GetSocialDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.SocialDescription) {
		return nil, false
	}
	return o.SocialDescription, true
}

// HasSocialDescription returns a boolean if a field has been set.
func (o *RestEPost) HasSocialDescription() bool {
	if o != nil && !IsNil(o.SocialDescription) {
		return true
	}

	return false
}

// SetSocialDescription gets a reference to the given string and assigns it to the SocialDescription field.
func (o *RestEPost) SetSocialDescription(v string) {
	o.SocialDescription = &v
}

// GetSocialImageUrl returns the SocialImageUrl field value if set, zero value otherwise.
func (o *RestEPost) GetSocialImageUrl() string {
	if o == nil || IsNil(o.SocialImageUrl) {
		var ret string
		return ret
	}
	return *o.SocialImageUrl
}

// GetSocialImageUrlOk returns a tuple with the SocialImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestEPost) GetSocialImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SocialImageUrl) {
		return nil, false
	}
	return o.SocialImageUrl, true
}

// HasSocialImageUrl returns a boolean if a field has been set.
func (o *RestEPost) HasSocialImageUrl() bool {
	if o != nil && !IsNil(o.SocialImageUrl) {
		return true
	}

	return false
}

// SetSocialImageUrl gets a reference to the given string and assigns it to the SocialImageUrl field.
func (o *RestEPost) SetSocialImageUrl(v string) {
	o.SocialImageUrl = &v
}

func (o RestEPost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestEPost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["postTitle"] = o.PostTitle
	if !IsNil(o.PostDescription) {
		toSerialize["postDescription"] = o.PostDescription
	}
	if !IsNil(o.PostCategory) {
		toSerialize["postCategory"] = o.PostCategory
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.PostThumbnail) {
		toSerialize["postThumbnail"] = o.PostThumbnail
	}
	if !IsNil(o.PostHtml) {
		toSerialize["postHtml"] = o.PostHtml
	}
	if !IsNil(o.PostTemplate) {
		toSerialize["postTemplate"] = o.PostTemplate
	}
	if !IsNil(o.IsPublished) {
		toSerialize["isPublished"] = o.IsPublished
	}
	if !IsNil(o.IncludedTags) {
		toSerialize["includedTags"] = o.IncludedTags
	}
	if !IsNil(o.EditorType) {
		toSerialize["editorType"] = o.EditorType
	}
	if !IsNil(o.PostSlug) {
		toSerialize["postSlug"] = o.PostSlug
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.PageTitle) {
		toSerialize["pageTitle"] = o.PageTitle
	}
	if !IsNil(o.PageDescription) {
		toSerialize["pageDescription"] = o.PageDescription
	}
	if !IsNil(o.PageKeywords) {
		toSerialize["pageKeywords"] = o.PageKeywords
	}
	if !IsNil(o.SocialTitle) {
		toSerialize["socialTitle"] = o.SocialTitle
	}
	if !IsNil(o.SocialDescription) {
		toSerialize["socialDescription"] = o.SocialDescription
	}
	if !IsNil(o.SocialImageUrl) {
		toSerialize["socialImageUrl"] = o.SocialImageUrl
	}
	return toSerialize, nil
}

func (o *RestEPost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"postTitle",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestEPost := _RestEPost{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestEPost)

	if err != nil {
		return err
	}

	*o = RestEPost(varRestEPost)

	return err
}

type NullableRestEPost struct {
	value *RestEPost
	isSet bool
}

func (v NullableRestEPost) Get() *RestEPost {
	return v.value
}

func (v *NullableRestEPost) Set(val *RestEPost) {
	v.value = val
	v.isSet = true
}

func (v NullableRestEPost) IsSet() bool {
	return v.isSet
}

func (v *NullableRestEPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestEPost(val *RestEPost) *NullableRestEPost {
	return &NullableRestEPost{value: val, isSet: true}
}

func (v NullableRestEPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestEPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


